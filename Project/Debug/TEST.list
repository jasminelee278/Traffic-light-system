
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000453c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080046cc  080046cc  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046cc  080046cc  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200000d4  080047a8  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080047a8  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143d2  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6c  00000000  00000000  000344cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00037140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00038168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001992e  00000000  00000000  00039058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001552f  00000000  00000000  00052986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d994  00000000  00000000  00067eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  000f589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004630 	.word	0x08004630

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08004630 	.word	0x08004630

0800014c <setTimer>:
#include "Software_timer.h"

int timerCounter[10];
int timer_flag[10];

void setTimer(int index, int counter){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	timerCounter[index]=counter/TICK;
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	4a09      	ldr	r2, [pc, #36]	; (8000180 <setTimer+0x34>)
 800015a:	fb82 1203 	smull	r1, r2, r2, r3
 800015e:	1092      	asrs	r2, r2, #2
 8000160:	17db      	asrs	r3, r3, #31
 8000162:	1ad2      	subs	r2, r2, r3
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <setTimer+0x38>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 800016c:	4a06      	ldr	r2, [pc, #24]	; (8000188 <setTimer+0x3c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2100      	movs	r1, #0
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	66666667 	.word	0x66666667
 8000184:	2000012c 	.word	0x2000012c
 8000188:	20000154 	.word	0x20000154

0800018c <clearTimer>:
void clearTimer(){
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	e00c      	b.n	80001b2 <clearTimer+0x26>
	timerCounter[i]=0;
 8000198:	4a0a      	ldr	r2, [pc, #40]	; (80001c4 <clearTimer+0x38>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2100      	movs	r1, #0
 800019e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[i]=0;
 80001a2:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <clearTimer+0x3c>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2100      	movs	r1, #0
 80001a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b09      	cmp	r3, #9
 80001b6:	ddef      	ble.n	8000198 <clearTimer+0xc>
	}
}
 80001b8:	bf00      	nop
 80001ba:	bf00      	nop
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	2000012c 	.word	0x2000012c
 80001c8:	20000154 	.word	0x20000154

080001cc <isTimerExpired>:
				timer_flag[i]=1;
			}
		}
	}
}
int isTimerExpired(int index){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]==1){
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <isTimerExpired+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d106      	bne.n	80001ee <isTimerExpired+0x22>
		timer_flag[index]=0;
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <isTimerExpired+0x30>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2100      	movs	r1, #0
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e000      	b.n	80001f0 <isTimerExpired+0x24>
	}
	else
	return 0;
 80001ee:	2300      	movs	r3, #0
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000154 	.word	0x20000154

08000200 <init_trafficlight>:
 *      Author: LENOVO
 */

#include "TrafficLight.h"

void init_trafficlight(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	480a      	ldr	r0, [pc, #40]	; (8000234 <init_trafficlight+0x34>)
 800020a:	f001 ffd8 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2140      	movs	r1, #64	; 0x40
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <init_trafficlight+0x38>)
 8000214:	f001 ffd3 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <init_trafficlight+0x3c>)
 8000220:	f001 ffcd 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022a:	4804      	ldr	r0, [pc, #16]	; (800023c <init_trafficlight+0x3c>)
 800022c:	f001 ffc7 	bl	80021be <HAL_GPIO_WritePin>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40011000 	.word	0x40011000
 8000238:	40010c00 	.word	0x40010c00
 800023c:	40010800 	.word	0x40010800

08000240 <led_green_red>:
void led_green_red(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	// traffic1
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000244:	2202      	movs	r2, #2
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <led_green_red+0x34>)
 800024a:	f001 ffb8 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2140      	movs	r1, #64	; 0x40
 8000252:	4809      	ldr	r0, [pc, #36]	; (8000278 <led_green_red+0x38>)
 8000254:	f001 ffb3 	bl	80021be <HAL_GPIO_WritePin>
	// traffic2
	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8000258:	2202      	movs	r2, #2
 800025a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <led_green_red+0x3c>)
 8000260:	f001 ffad 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8000264:	2202      	movs	r2, #2
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <led_green_red+0x3c>)
 800026c:	f001 ffa7 	bl	80021be <HAL_GPIO_WritePin>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40011000 	.word	0x40011000
 8000278:	40010c00 	.word	0x40010c00
 800027c:	40010800 	.word	0x40010800

08000280 <led_yellow_red>:
void led_yellow_red(){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	//traffic1
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <led_yellow_red+0x34>)
 800028a:	f001 ff98 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 800028e:	2202      	movs	r2, #2
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	4809      	ldr	r0, [pc, #36]	; (80002b8 <led_yellow_red+0x38>)
 8000294:	f001 ff93 	bl	80021be <HAL_GPIO_WritePin>
	//traffic2
	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 8000298:	2202      	movs	r2, #2
 800029a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029e:	4807      	ldr	r0, [pc, #28]	; (80002bc <led_yellow_red+0x3c>)
 80002a0:	f001 ff8d 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 80002a4:	2202      	movs	r2, #2
 80002a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <led_yellow_red+0x3c>)
 80002ac:	f001 ff87 	bl	80021be <HAL_GPIO_WritePin>
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40011000 	.word	0x40011000
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	40010800 	.word	0x40010800

080002c0 <led_red_green>:
void led_red_green(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//traffic1
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 80002c4:	2202      	movs	r2, #2
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <led_red_green+0x34>)
 80002ca:	f001 ff78 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 80002ce:	2202      	movs	r2, #2
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <led_red_green+0x38>)
 80002d4:	f001 ff73 	bl	80021be <HAL_GPIO_WritePin>
	//traffic2
	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, SET);
 80002d8:	2202      	movs	r2, #2
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	4807      	ldr	r0, [pc, #28]	; (80002fc <led_red_green+0x3c>)
 80002e0:	f001 ff6d 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <led_red_green+0x3c>)
 80002ec:	f001 ff67 	bl	80021be <HAL_GPIO_WritePin>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40011000 	.word	0x40011000
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	40010800 	.word	0x40010800

08000300 <led_red_yellow>:
void led_red_yellow(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//traffic1
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, SET);
 8000304:	2202      	movs	r2, #2
 8000306:	2180      	movs	r1, #128	; 0x80
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <led_red_yellow+0x34>)
 800030a:	f001 ff58 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, SET);
 800030e:	2202      	movs	r2, #2
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	4809      	ldr	r0, [pc, #36]	; (8000338 <led_red_yellow+0x38>)
 8000314:	f001 ff53 	bl	80021be <HAL_GPIO_WritePin>
	//traffic2
	HAL_GPIO_WritePin(LED2_A_GPIO_Port, LED2_A_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <led_red_yellow+0x3c>)
 8000320:	f001 ff4d 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_B_GPIO_Port, LED2_B_Pin, SET);
 8000324:	2202      	movs	r2, #2
 8000326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032a:	4804      	ldr	r0, [pc, #16]	; (800033c <led_red_yellow+0x3c>)
 800032c:	f001 ff47 	bl	80021be <HAL_GPIO_WritePin>
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40011000 	.word	0x40011000
 8000338:	40010c00 	.word	0x40010c00
 800033c:	40010800 	.word	0x40010800

08000340 <TogglePinRED>:
void TogglePinRED(){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_A_GPIO_Port, LED1_A_Pin);
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	4809      	ldr	r0, [pc, #36]	; (800036c <TogglePinRED+0x2c>)
 8000348:	f001 ff51 	bl	80021ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED1_B_GPIO_Port, LED1_B_Pin);
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <TogglePinRED+0x30>)
 8000350:	f001 ff4d 	bl	80021ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_A_GPIO_Port, LED2_A_Pin);
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <TogglePinRED+0x34>)
 800035a:	f001 ff48 	bl	80021ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_B_GPIO_Port, LED2_B_Pin);
 800035e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <TogglePinRED+0x34>)
 8000364:	f001 ff43 	bl	80021ee <HAL_GPIO_TogglePin>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40011000 	.word	0x40011000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40010800 	.word	0x40010800

08000378 <TogglePinYELLOW>:
void TogglePinYELLOW(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_B_GPIO_Port, LED1_B_Pin);
 800037c:	2140      	movs	r1, #64	; 0x40
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <TogglePinYELLOW+0x1c>)
 8000380:	f001 ff35 	bl	80021ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_B_GPIO_Port, LED2_B_Pin);
 8000384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <TogglePinYELLOW+0x20>)
 800038a:	f001 ff30 	bl	80021ee <HAL_GPIO_TogglePin>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010c00 	.word	0x40010c00
 8000398:	40010800 	.word	0x40010800

0800039c <TogglePinGREEN>:
void TogglePinGREEN(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_A_GPIO_Port, LED1_A_Pin);
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <TogglePinGREEN+0x1c>)
 80003a4:	f001 ff23 	bl	80021ee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_A_GPIO_Port, LED2_A_Pin);
 80003a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <TogglePinGREEN+0x20>)
 80003ae:	f001 ff1e 	bl	80021ee <HAL_GPIO_TogglePin>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40011000 	.word	0x40011000
 80003bc:	40010800 	.word	0x40010800

080003c0 <isButtonPressed>:
int button_counter[MAX_BUTTONS] = {0};

GPIO_TypeDef* butt_ports[MAX_BUTTONS] = {BUTTON0_GPIO_Port, BUTTON1_GPIO_Port};
uint16_t butt_pins[MAX_BUTTONS] = {BUTTON0_Pin, BUTTON1_Pin};

int isButtonPressed(int index){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	if(button_pressed[index] == 1){
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <isButtonPressed+0x30>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d106      	bne.n	80003e2 <isButtonPressed+0x22>
		button_pressed[index] = 0;
 80003d4:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <isButtonPressed+0x30>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2100      	movs	r1, #0
 80003da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003de:	2301      	movs	r3, #1
 80003e0:	e000      	b.n	80003e4 <isButtonPressed+0x24>
	}
	return 0;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	200000f0 	.word	0x200000f0

080003f4 <isButtonLongPressed>:

int isButtonLongPressed(int index){
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	if(button_long_pressed[index] == 1){
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <isButtonLongPressed+0x30>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <isButtonLongPressed+0x22>
		button_long_pressed[index] = 0;
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <isButtonLongPressed+0x30>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2100      	movs	r1, #0
 800040e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000412:	2301      	movs	r3, #1
 8000414:	e000      	b.n	8000418 <isButtonLongPressed+0x24>
	}
	return 0;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000fc 	.word	0x200000fc

08000428 <getKeyInput>:

void getKeyInput(){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTONS; i++){
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e087      	b.n	8000544 <getKeyInput+0x11c>
		KeyReg2[i] = KeyReg1[i];
 8000434:	4a48      	ldr	r2, [pc, #288]	; (8000558 <getKeyInput+0x130>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4947      	ldr	r1, [pc, #284]	; (800055c <getKeyInput+0x134>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000444:	4a46      	ldr	r2, [pc, #280]	; (8000560 <getKeyInput+0x138>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800044c:	4942      	ldr	r1, [pc, #264]	; (8000558 <getKeyInput+0x130>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(butt_ports[i], butt_pins[i]);
 8000454:	4a43      	ldr	r2, [pc, #268]	; (8000564 <getKeyInput+0x13c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800045c:	4942      	ldr	r1, [pc, #264]	; (8000568 <getKeyInput+0x140>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000464:	4619      	mov	r1, r3
 8000466:	4610      	mov	r0, r2
 8000468:	f001 fe92 	bl	8002190 <HAL_GPIO_ReadPin>
 800046c:	4603      	mov	r3, r0
 800046e:	4619      	mov	r1, r3
 8000470:	4a3b      	ldr	r2, [pc, #236]	; (8000560 <getKeyInput+0x138>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000478:	4a37      	ldr	r2, [pc, #220]	; (8000558 <getKeyInput+0x130>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000480:	4937      	ldr	r1, [pc, #220]	; (8000560 <getKeyInput+0x138>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000488:	429a      	cmp	r2, r3
 800048a:	d158      	bne.n	800053e <getKeyInput+0x116>
 800048c:	4a32      	ldr	r2, [pc, #200]	; (8000558 <getKeyInput+0x130>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000494:	4931      	ldr	r1, [pc, #196]	; (800055c <getKeyInput+0x134>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049c:	429a      	cmp	r2, r3
 800049e:	d14e      	bne.n	800053e <getKeyInput+0x116>
			if (KeyReg2[i] != KeyReg3[i]){
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <getKeyInput+0x134>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a8:	4930      	ldr	r1, [pc, #192]	; (800056c <getKeyInput+0x144>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d024      	beq.n	80004fe <getKeyInput+0xd6>
				KeyReg3[i] = KeyReg2[i];
 80004b4:	4a29      	ldr	r2, [pc, #164]	; (800055c <getKeyInput+0x134>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004bc:	492b      	ldr	r1, [pc, #172]	; (800056c <getKeyInput+0x144>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 80004c4:	4a25      	ldr	r2, [pc, #148]	; (800055c <getKeyInput+0x134>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <getKeyInput+0xb4>
					TimeOutForKeyPress[i] = LONG_PRESS_THRESHOLD;
 80004d0:	4a27      	ldr	r2, [pc, #156]	; (8000570 <getKeyInput+0x148>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2164      	movs	r1, #100	; 0x64
 80004d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004da:	e030      	b.n	800053e <getKeyInput+0x116>
				}
				else{
					if(TimeOutForKeyPress[i]>0){
 80004dc:	4a24      	ldr	r2, [pc, #144]	; (8000570 <getKeyInput+0x148>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dd04      	ble.n	80004f2 <getKeyInput+0xca>
						button_pressed[i] = 1;
 80004e8:	4a22      	ldr	r2, [pc, #136]	; (8000574 <getKeyInput+0x14c>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2101      	movs	r1, #1
 80004ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					TimeOutForKeyPress[i] =LONG_PRESS_THRESHOLD;
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <getKeyInput+0x148>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2164      	movs	r1, #100	; 0x64
 80004f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80004fc:	e01f      	b.n	800053e <getKeyInput+0x116>
				}
			}
			else {
				TimeOutForKeyPress[i]--;
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <getKeyInput+0x148>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000506:	1e5a      	subs	r2, r3, #1
 8000508:	4919      	ldr	r1, [pc, #100]	; (8000570 <getKeyInput+0x148>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <getKeyInput+0x148>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d110      	bne.n	800053e <getKeyInput+0x116>
					if (KeyReg2[i] == PRESSED_STATE){
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <getKeyInput+0x134>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d105      	bne.n	8000534 <getKeyInput+0x10c>
						button_long_pressed[i] = 1;
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <getKeyInput+0x150>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2101      	movs	r1, #1
 800052e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000532:	e004      	b.n	800053e <getKeyInput+0x116>
					} else {
						TimeOutForKeyPress[i] = LONG_PRESS_THRESHOLD;
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <getKeyInput+0x148>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2164      	movs	r1, #100	; 0x64
 800053a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTONS; i++){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b02      	cmp	r3, #2
 8000548:	f77f af74 	ble.w	8000434 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000000c 	.word	0x2000000c
 800055c:	20000018 	.word	0x20000018
 8000560:	20000000 	.word	0x20000000
 8000564:	2000003c 	.word	0x2000003c
 8000568:	20000048 	.word	0x20000048
 800056c:	20000024 	.word	0x20000024
 8000570:	20000030 	.word	0x20000030
 8000574:	200000f0 	.word	0x200000f0
 8000578:	200000fc 	.word	0x200000fc

0800057c <counter_1s>:
 *
 *  Created on: Oct 24, 2024
 *      Author: LENOVO
 */
#include "fsm_auto.h"
void counter_1s(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	time_counter_1--;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <counter_1s+0x20>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <counter_1s+0x20>)
 8000588:	6013      	str	r3, [r2, #0]
	time_counter_2--;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <counter_1s+0x24>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3b01      	subs	r3, #1
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <counter_1s+0x24>)
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000110 	.word	0x20000110
 80005a0:	20000114 	.word	0x20000114

080005a4 <fsm_auto_run>:
void fsm_auto_run(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	isButtonPressed(1);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f7ff ff09 	bl	80003c0 <isButtonPressed>
	switch(status){
 80005ae:	4b9d      	ldr	r3, [pc, #628]	; (8000824 <fsm_auto_run+0x280>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	f200 81a6 	bhi.w	8000904 <fsm_auto_run+0x360>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <fsm_auto_run+0x1c>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d9 	.word	0x080005d9
 80005c4:	08000627 	.word	0x08000627
 80005c8:	080006d1 	.word	0x080006d1
 80005cc:	0800077b 	.word	0x0800077b
 80005d0:	08000851 	.word	0x08000851
 80005d4:	080008f3 	.word	0x080008f3
		case INIT:
			if(1){
				mode=0;
 80005d8:	4b93      	ldr	r3, [pc, #588]	; (8000828 <fsm_auto_run+0x284>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
				status = GREEN_RED;
 80005de:	4b91      	ldr	r3, [pc, #580]	; (8000824 <fsm_auto_run+0x280>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	601a      	str	r2, [r3, #0]
				time_counter_1=duration_green/1000;
 80005e4:	4b91      	ldr	r3, [pc, #580]	; (800082c <fsm_auto_run+0x288>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a91      	ldr	r2, [pc, #580]	; (8000830 <fsm_auto_run+0x28c>)
 80005ea:	fb82 1203 	smull	r1, r2, r2, r3
 80005ee:	1192      	asrs	r2, r2, #6
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	4a8f      	ldr	r2, [pc, #572]	; (8000834 <fsm_auto_run+0x290>)
 80005f6:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_red/1000;
 80005f8:	4b8f      	ldr	r3, [pc, #572]	; (8000838 <fsm_auto_run+0x294>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a8c      	ldr	r2, [pc, #560]	; (8000830 <fsm_auto_run+0x28c>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1192      	asrs	r2, r2, #6
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	4a8c      	ldr	r2, [pc, #560]	; (800083c <fsm_auto_run+0x298>)
 800060a:	6013      	str	r3, [r2, #0]
				setting_time = duration_red/1000;
 800060c:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <fsm_auto_run+0x294>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a87      	ldr	r2, [pc, #540]	; (8000830 <fsm_auto_run+0x28c>)
 8000612:	fb82 1203 	smull	r1, r2, r2, r3
 8000616:	1192      	asrs	r2, r2, #6
 8000618:	17db      	asrs	r3, r3, #31
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	4a88      	ldr	r2, [pc, #544]	; (8000840 <fsm_auto_run+0x29c>)
 800061e:	6013      	str	r3, [r2, #0]
				lcd_clear_display();
 8000620:	f000 fd5b 	bl	80010da <lcd_clear_display>
			}
			break;
 8000624:	e16e      	b.n	8000904 <fsm_auto_run+0x360>
		case GREEN_RED:
			mode=0;
 8000626:	4b80      	ldr	r3, [pc, #512]	; (8000828 <fsm_auto_run+0x284>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
			updateBufferLcd_run();
 800062c:	f001 fa30 	bl	8001a90 <updateBufferLcd_run>
			led_green_red();
 8000630:	f7ff fe06 	bl	8000240 <led_green_red>
			if(time_counter_1==0){
 8000634:	4b7f      	ldr	r3, [pc, #508]	; (8000834 <fsm_auto_run+0x290>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d116      	bne.n	800066a <fsm_auto_run+0xc6>
				time_counter_1=duration_yellow/1000;
 800063c:	4b81      	ldr	r3, [pc, #516]	; (8000844 <fsm_auto_run+0x2a0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a7b      	ldr	r2, [pc, #492]	; (8000830 <fsm_auto_run+0x28c>)
 8000642:	fb82 1203 	smull	r1, r2, r2, r3
 8000646:	1192      	asrs	r2, r2, #6
 8000648:	17db      	asrs	r3, r3, #31
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	4a79      	ldr	r2, [pc, #484]	; (8000834 <fsm_auto_run+0x290>)
 800064e:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_yellow/1000;
 8000650:	4b7c      	ldr	r3, [pc, #496]	; (8000844 <fsm_auto_run+0x2a0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a76      	ldr	r2, [pc, #472]	; (8000830 <fsm_auto_run+0x28c>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1192      	asrs	r2, r2, #6
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	4a76      	ldr	r2, [pc, #472]	; (800083c <fsm_auto_run+0x298>)
 8000662:	6013      	str	r3, [r2, #0]
				status = YELLOW_RED;
 8000664:	4b6f      	ldr	r3, [pc, #444]	; (8000824 <fsm_auto_run+0x280>)
 8000666:	2202      	movs	r2, #2
 8000668:	601a      	str	r2, [r3, #0]
			}
			if(isButtonLongPressed(0)){
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fec2 	bl	80003f4 <isButtonLongPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d012      	beq.n	800069c <fsm_auto_run+0xf8>
				mode=1;
 8000676:	4b6c      	ldr	r3, [pc, #432]	; (8000828 <fsm_auto_run+0x284>)
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
				init_trafficlight();
 800067c:	f7ff fdc0 	bl	8000200 <init_trafficlight>
				status = WAIT;
 8000680:	4b68      	ldr	r3, [pc, #416]	; (8000824 <fsm_auto_run+0x280>)
 8000682:	2205      	movs	r2, #5
 8000684:	601a      	str	r2, [r3, #0]
				modee = MODIFY_RED;
 8000686:	4b70      	ldr	r3, [pc, #448]	; (8000848 <fsm_auto_run+0x2a4>)
 8000688:	2206      	movs	r2, #6
 800068a:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 800068c:	f000 fd25 	bl	80010da <lcd_clear_display>
				time_counter_1=1;
 8000690:	4b68      	ldr	r3, [pc, #416]	; (8000834 <fsm_auto_run+0x290>)
 8000692:	2201      	movs	r2, #1
 8000694:	601a      	str	r2, [r3, #0]
				time_counter_2=1;
 8000696:	4b69      	ldr	r3, [pc, #420]	; (800083c <fsm_auto_run+0x298>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)){
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff fe8f 	bl	80003c0 <isButtonPressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 8126 	beq.w	80008f6 <fsm_auto_run+0x352>
				mode=4;
 80006aa:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <fsm_auto_run+0x284>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	601a      	str	r2, [r3, #0]
				laststatus=status;
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <fsm_auto_run+0x280>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a65      	ldr	r2, [pc, #404]	; (800084c <fsm_auto_run+0x2a8>)
 80006b6:	6013      	str	r3, [r2, #0]
				status = WAIT;
 80006b8:	4b5a      	ldr	r3, [pc, #360]	; (8000824 <fsm_auto_run+0x280>)
 80006ba:	2205      	movs	r2, #5
 80006bc:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <fsm_auto_run+0x290>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
				time_counter_2=0;
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <fsm_auto_run+0x298>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 80006ca:	f000 fd06 	bl	80010da <lcd_clear_display>
			}
			break;
 80006ce:	e112      	b.n	80008f6 <fsm_auto_run+0x352>
		case YELLOW_RED:
			mode=0;
 80006d0:	4b55      	ldr	r3, [pc, #340]	; (8000828 <fsm_auto_run+0x284>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
			updateBufferLcd_run();
 80006d6:	f001 f9db 	bl	8001a90 <updateBufferLcd_run>
			led_yellow_red();
 80006da:	f7ff fdd1 	bl	8000280 <led_yellow_red>
			if(time_counter_1==0){
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <fsm_auto_run+0x290>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d116      	bne.n	8000714 <fsm_auto_run+0x170>
				time_counter_1=duration_red/1000;
 80006e6:	4b54      	ldr	r3, [pc, #336]	; (8000838 <fsm_auto_run+0x294>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a51      	ldr	r2, [pc, #324]	; (8000830 <fsm_auto_run+0x28c>)
 80006ec:	fb82 1203 	smull	r1, r2, r2, r3
 80006f0:	1192      	asrs	r2, r2, #6
 80006f2:	17db      	asrs	r3, r3, #31
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	4a4f      	ldr	r2, [pc, #316]	; (8000834 <fsm_auto_run+0x290>)
 80006f8:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_green/1000;
 80006fa:	4b4c      	ldr	r3, [pc, #304]	; (800082c <fsm_auto_run+0x288>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a4c      	ldr	r2, [pc, #304]	; (8000830 <fsm_auto_run+0x28c>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1192      	asrs	r2, r2, #6
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	4a4c      	ldr	r2, [pc, #304]	; (800083c <fsm_auto_run+0x298>)
 800070c:	6013      	str	r3, [r2, #0]
				status = RED_GREEN;
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <fsm_auto_run+0x280>)
 8000710:	2203      	movs	r2, #3
 8000712:	601a      	str	r2, [r3, #0]
			}
			if(isButtonLongPressed(0)==1){
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe6d 	bl	80003f4 <isButtonLongPressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d112      	bne.n	8000746 <fsm_auto_run+0x1a2>
				mode=1;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <fsm_auto_run+0x284>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				init_trafficlight();
 8000726:	f7ff fd6b 	bl	8000200 <init_trafficlight>
				status=WAIT;
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <fsm_auto_run+0x280>)
 800072c:	2205      	movs	r2, #5
 800072e:	601a      	str	r2, [r3, #0]
				modee = MODIFY_RED;
 8000730:	4b45      	ldr	r3, [pc, #276]	; (8000848 <fsm_auto_run+0x2a4>)
 8000732:	2206      	movs	r2, #6
 8000734:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 8000736:	f000 fcd0 	bl	80010da <lcd_clear_display>
				time_counter_1=1;
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <fsm_auto_run+0x290>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
				time_counter_2=1;
 8000740:	4b3e      	ldr	r3, [pc, #248]	; (800083c <fsm_auto_run+0x298>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)==1){
 8000746:	2000      	movs	r0, #0
 8000748:	f7ff fe3a 	bl	80003c0 <isButtonPressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	f040 80d3 	bne.w	80008fa <fsm_auto_run+0x356>
				mode=4;
 8000754:	4b34      	ldr	r3, [pc, #208]	; (8000828 <fsm_auto_run+0x284>)
 8000756:	2204      	movs	r2, #4
 8000758:	601a      	str	r2, [r3, #0]
				laststatus=status;
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <fsm_auto_run+0x280>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a3b      	ldr	r2, [pc, #236]	; (800084c <fsm_auto_run+0x2a8>)
 8000760:	6013      	str	r3, [r2, #0]
				status = WAIT;
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <fsm_auto_run+0x280>)
 8000764:	2205      	movs	r2, #5
 8000766:	601a      	str	r2, [r3, #0]
				time_counter_1=2;
 8000768:	4b32      	ldr	r3, [pc, #200]	; (8000834 <fsm_auto_run+0x290>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
				time_counter_2=0;
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <fsm_auto_run+0x298>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 8000774:	f000 fcb1 	bl	80010da <lcd_clear_display>
			}
			break;
 8000778:	e0bf      	b.n	80008fa <fsm_auto_run+0x356>
		case RED_GREEN:
			mode=0;
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <fsm_auto_run+0x284>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
			updateBufferLcd_run();
 8000780:	f001 f986 	bl	8001a90 <updateBufferLcd_run>
			led_red_green();
 8000784:	f7ff fd9c 	bl	80002c0 <led_red_green>
			if(time_counter_2==0){
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <fsm_auto_run+0x298>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d116      	bne.n	80007be <fsm_auto_run+0x21a>
				time_counter_2=duration_yellow/1000;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <fsm_auto_run+0x2a0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <fsm_auto_run+0x28c>)
 8000796:	fb82 1203 	smull	r1, r2, r2, r3
 800079a:	1192      	asrs	r2, r2, #6
 800079c:	17db      	asrs	r3, r3, #31
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <fsm_auto_run+0x298>)
 80007a2:	6013      	str	r3, [r2, #0]
				time_counter_1=duration_yellow/1000;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <fsm_auto_run+0x2a0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <fsm_auto_run+0x28c>)
 80007aa:	fb82 1203 	smull	r1, r2, r2, r3
 80007ae:	1192      	asrs	r2, r2, #6
 80007b0:	17db      	asrs	r3, r3, #31
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <fsm_auto_run+0x290>)
 80007b6:	6013      	str	r3, [r2, #0]
				status = RED_YELLOW;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <fsm_auto_run+0x280>)
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
			}
			if(isButtonLongPressed(0)==1){
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff fe18 	bl	80003f4 <isButtonLongPressed>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d112      	bne.n	80007f0 <fsm_auto_run+0x24c>
				mode=1;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <fsm_auto_run+0x284>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
				init_trafficlight();
 80007d0:	f7ff fd16 	bl	8000200 <init_trafficlight>
				status=WAIT;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <fsm_auto_run+0x280>)
 80007d6:	2205      	movs	r2, #5
 80007d8:	601a      	str	r2, [r3, #0]
				modee = MODIFY_RED;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <fsm_auto_run+0x2a4>)
 80007dc:	2206      	movs	r2, #6
 80007de:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 80007e0:	f000 fc7b 	bl	80010da <lcd_clear_display>
				time_counter_1=1;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <fsm_auto_run+0x290>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
								time_counter_2=1;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <fsm_auto_run+0x298>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)==1){
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff fde5 	bl	80003c0 <isButtonPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	f040 8080 	bne.w	80008fe <fsm_auto_run+0x35a>
				mode=4;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <fsm_auto_run+0x284>)
 8000800:	2204      	movs	r2, #4
 8000802:	601a      	str	r2, [r3, #0]
				laststatus=status;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <fsm_auto_run+0x280>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <fsm_auto_run+0x2a8>)
 800080a:	6013      	str	r3, [r2, #0]
				status = WAIT;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <fsm_auto_run+0x280>)
 800080e:	2205      	movs	r2, #5
 8000810:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <fsm_auto_run+0x290>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
				time_counter_2=0;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <fsm_auto_run+0x298>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 800081e:	f000 fc5c 	bl	80010da <lcd_clear_display>
			}
			break;
 8000822:	e06c      	b.n	80008fe <fsm_auto_run+0x35a>
 8000824:	2000010c 	.word	0x2000010c
 8000828:	20000108 	.word	0x20000108
 800082c:	20000060 	.word	0x20000060
 8000830:	10624dd3 	.word	0x10624dd3
 8000834:	20000110 	.word	0x20000110
 8000838:	20000058 	.word	0x20000058
 800083c:	20000114 	.word	0x20000114
 8000840:	20000118 	.word	0x20000118
 8000844:	2000005c 	.word	0x2000005c
 8000848:	20000050 	.word	0x20000050
 800084c:	20000054 	.word	0x20000054
		case RED_YELLOW:
			mode=0;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <fsm_auto_run+0x364>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
			updateBufferLcd_run();
 8000856:	f001 f91b 	bl	8001a90 <updateBufferLcd_run>
			led_red_yellow();
 800085a:	f7ff fd51 	bl	8000300 <led_red_yellow>
			if(time_counter_2==0){
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <fsm_auto_run+0x368>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d116      	bne.n	8000894 <fsm_auto_run+0x2f0>
				status = GREEN_RED;
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <fsm_auto_run+0x36c>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
				time_counter_1= duration_green/1000;
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <fsm_auto_run+0x370>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a29      	ldr	r2, [pc, #164]	; (8000918 <fsm_auto_run+0x374>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1192      	asrs	r2, r2, #6
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	4a27      	ldr	r2, [pc, #156]	; (800091c <fsm_auto_run+0x378>)
 800087e:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_red/1000;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <fsm_auto_run+0x37c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <fsm_auto_run+0x374>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1192      	asrs	r2, r2, #6
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	4a1e      	ldr	r2, [pc, #120]	; (800090c <fsm_auto_run+0x368>)
 8000892:	6013      	str	r3, [r2, #0]
			}
			if(isButtonLongPressed(0)==1){
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fdad 	bl	80003f4 <isButtonLongPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10f      	bne.n	80008c0 <fsm_auto_run+0x31c>
				mode=1;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <fsm_auto_run+0x364>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
				init_trafficlight();
 80008a6:	f7ff fcab 	bl	8000200 <init_trafficlight>
				status=WAIT;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <fsm_auto_run+0x36c>)
 80008ac:	2205      	movs	r2, #5
 80008ae:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 80008b0:	f000 fc13 	bl	80010da <lcd_clear_display>
				time_counter_1=1;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <fsm_auto_run+0x378>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
								time_counter_2=1;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <fsm_auto_run+0x368>)
 80008bc:	2201      	movs	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0)==1){
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fd7d 	bl	80003c0 <isButtonPressed>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d11a      	bne.n	8000902 <fsm_auto_run+0x35e>
				mode=4;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <fsm_auto_run+0x364>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	601a      	str	r2, [r3, #0]
				laststatus=status;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <fsm_auto_run+0x36c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <fsm_auto_run+0x380>)
 80008d8:	6013      	str	r3, [r2, #0]
				status = WAIT;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <fsm_auto_run+0x36c>)
 80008dc:	2205      	movs	r2, #5
 80008de:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <fsm_auto_run+0x378>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
				time_counter_2=2;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <fsm_auto_run+0x368>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 80008ec:	f000 fbf5 	bl	80010da <lcd_clear_display>
			}
			break;
 80008f0:	e007      	b.n	8000902 <fsm_auto_run+0x35e>
		case WAIT:

			break;
 80008f2:	bf00      	nop
 80008f4:	e006      	b.n	8000904 <fsm_auto_run+0x360>
			break;
 80008f6:	bf00      	nop
 80008f8:	e004      	b.n	8000904 <fsm_auto_run+0x360>
			break;
 80008fa:	bf00      	nop
 80008fc:	e002      	b.n	8000904 <fsm_auto_run+0x360>
			break;
 80008fe:	bf00      	nop
 8000900:	e000      	b.n	8000904 <fsm_auto_run+0x360>
			break;
 8000902:	bf00      	nop

	}
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000108 	.word	0x20000108
 800090c:	20000114 	.word	0x20000114
 8000910:	2000010c 	.word	0x2000010c
 8000914:	20000060 	.word	0x20000060
 8000918:	10624dd3 	.word	0x10624dd3
 800091c:	20000110 	.word	0x20000110
 8000920:	20000058 	.word	0x20000058
 8000924:	20000054 	.word	0x20000054

08000928 <fsm_manual_run>:
 */


#include "fsm_manual.h"

void fsm_manual_run(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	switch(laststatus){
 800092c:	4ba3      	ldr	r3, [pc, #652]	; (8000bbc <fsm_manual_run+0x294>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	2b04      	cmp	r3, #4
 8000934:	f200 81be 	bhi.w	8000cb4 <fsm_manual_run+0x38c>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <fsm_manual_run+0x18>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000955 	.word	0x08000955
 8000944:	08000a29 	.word	0x08000a29
 8000948:	08000ae9 	.word	0x08000ae9
 800094c:	08000be5 	.word	0x08000be5
 8000950:	08000ca3 	.word	0x08000ca3
		case GREEN_RED:
			updateBufferLcd_run();
 8000954:	f001 f89c 	bl	8001a90 <updateBufferLcd_run>
			led_green_red();
 8000958:	f7ff fc72 	bl	8000240 <led_green_red>
			if(isButtonPressed(1)==1){
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fd2f 	bl	80003c0 <isButtonPressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d132      	bne.n	80009ce <fsm_manual_run+0xa6>
				status=laststatus;
 8000968:	4b94      	ldr	r3, [pc, #592]	; (8000bbc <fsm_manual_run+0x294>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a94      	ldr	r2, [pc, #592]	; (8000bc0 <fsm_manual_run+0x298>)
 800096e:	6013      	str	r3, [r2, #0]
				laststatus=WAIT;
 8000970:	4b92      	ldr	r3, [pc, #584]	; (8000bbc <fsm_manual_run+0x294>)
 8000972:	2205      	movs	r2, #5
 8000974:	601a      	str	r2, [r3, #0]
				mode=0;
 8000976:	4b93      	ldr	r3, [pc, #588]	; (8000bc4 <fsm_manual_run+0x29c>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
				setTimer(0, duration_green);
 800097c:	4b92      	ldr	r3, [pc, #584]	; (8000bc8 <fsm_manual_run+0x2a0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fbe2 	bl	800014c <setTimer>
				setTimer(2, 1000);
 8000988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff fbdd 	bl	800014c <setTimer>
				time_counter_1=duration_green/1000;
 8000992:	4b8d      	ldr	r3, [pc, #564]	; (8000bc8 <fsm_manual_run+0x2a0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a8d      	ldr	r2, [pc, #564]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000998:	fb82 1203 	smull	r1, r2, r2, r3
 800099c:	1192      	asrs	r2, r2, #6
 800099e:	17db      	asrs	r3, r3, #31
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a8b      	ldr	r2, [pc, #556]	; (8000bd0 <fsm_manual_run+0x2a8>)
 80009a4:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_red/1000;
 80009a6:	4b8b      	ldr	r3, [pc, #556]	; (8000bd4 <fsm_manual_run+0x2ac>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a88      	ldr	r2, [pc, #544]	; (8000bcc <fsm_manual_run+0x2a4>)
 80009ac:	fb82 1203 	smull	r1, r2, r2, r3
 80009b0:	1192      	asrs	r2, r2, #6
 80009b2:	17db      	asrs	r3, r3, #31
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	4a88      	ldr	r2, [pc, #544]	; (8000bd8 <fsm_manual_run+0x2b0>)
 80009b8:	6013      	str	r3, [r2, #0]
				setting_time = duration_red/1000;
 80009ba:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <fsm_manual_run+0x2ac>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a83      	ldr	r2, [pc, #524]	; (8000bcc <fsm_manual_run+0x2a4>)
 80009c0:	fb82 1203 	smull	r1, r2, r2, r3
 80009c4:	1192      	asrs	r2, r2, #6
 80009c6:	17db      	asrs	r3, r3, #31
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	4a84      	ldr	r2, [pc, #528]	; (8000bdc <fsm_manual_run+0x2b4>)
 80009cc:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(0)){
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fcf6 	bl	80003c0 <isButtonPressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8165 	beq.w	8000ca6 <fsm_manual_run+0x37e>
				setTimer(0, duration_yellow);
 80009dc:	4b80      	ldr	r3, [pc, #512]	; (8000be0 <fsm_manual_run+0x2b8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <setTimer>
				setTimer(2, 1000);
 80009e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fbad 	bl	800014c <setTimer>
				time_counter_1=duration_yellow/1000;
 80009f2:	4b7b      	ldr	r3, [pc, #492]	; (8000be0 <fsm_manual_run+0x2b8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a75      	ldr	r2, [pc, #468]	; (8000bcc <fsm_manual_run+0x2a4>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1192      	asrs	r2, r2, #6
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a73      	ldr	r2, [pc, #460]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000a04:	6013      	str	r3, [r2, #0]
				laststatus = YELLOW_RED;
 8000a06:	4b6d      	ldr	r3, [pc, #436]	; (8000bbc <fsm_manual_run+0x294>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	601a      	str	r2, [r3, #0]
				time_counter_1=duration_yellow/1000;
 8000a0c:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000a12:	fb82 1203 	smull	r1, r2, r2, r3
 8000a16:	1192      	asrs	r2, r2, #6
 8000a18:	17db      	asrs	r3, r3, #31
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	4a6c      	ldr	r2, [pc, #432]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000a1e:	6013      	str	r3, [r2, #0]
				time_counter_2=0;
 8000a20:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a26:	e13e      	b.n	8000ca6 <fsm_manual_run+0x37e>
		case YELLOW_RED:
			updateBufferLcd_run();
 8000a28:	f001 f832 	bl	8001a90 <updateBufferLcd_run>
			led_yellow_red();
 8000a2c:	f7ff fc28 	bl	8000280 <led_yellow_red>
			if(isTimerExpired(0)==1){
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fbcb 	bl	80001cc <isTimerExpired>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10a      	bne.n	8000a52 <fsm_manual_run+0x12a>
				clearTimer();
 8000a3c:	f7ff fba6 	bl	800018c <clearTimer>
				laststatus = RED_GREEN;
 8000a40:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <fsm_manual_run+0x294>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
				time_counter_2=0;
 8000a4c:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(2)){
 8000a52:	2002      	movs	r0, #2
 8000a54:	f7ff fbba 	bl	80001cc <isTimerExpired>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d009      	beq.n	8000a72 <fsm_manual_run+0x14a>
				setTimer(2, 1000);
 8000a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff fb72 	bl	800014c <setTimer>
				time_counter_1--;
 8000a68:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a58      	ldr	r2, [pc, #352]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000a70:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(1)){
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fca4 	bl	80003c0 <isButtonPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8115 	beq.w	8000caa <fsm_manual_run+0x382>
				status=laststatus;
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <fsm_manual_run+0x294>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <fsm_manual_run+0x298>)
 8000a86:	6013      	str	r3, [r2, #0]
				laststatus=WAIT;
 8000a88:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <fsm_manual_run+0x294>)
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	601a      	str	r2, [r3, #0]
				mode=0;
 8000a8e:	4b4d      	ldr	r3, [pc, #308]	; (8000bc4 <fsm_manual_run+0x29c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
				setTimer(0, duration_yellow);
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fb56 	bl	800014c <setTimer>
				setTimer(2, 1000);
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f7ff fb51 	bl	800014c <setTimer>
				time_counter_1=duration_yellow/1000;
 8000aaa:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab4:	1192      	asrs	r2, r2, #6
 8000ab6:	17db      	asrs	r3, r3, #31
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	4a45      	ldr	r2, [pc, #276]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000abc:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_yellow/1000;
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	1192      	asrs	r2, r2, #6
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	4a42      	ldr	r2, [pc, #264]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000ad0:	6013      	str	r3, [r2, #0]
				setting_time = duration_red/1000;
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <fsm_manual_run+0x2ac>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8000adc:	1192      	asrs	r2, r2, #6
 8000ade:	17db      	asrs	r3, r3, #31
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <fsm_manual_run+0x2b4>)
 8000ae4:	6013      	str	r3, [r2, #0]
			}
			break;
 8000ae6:	e0e0      	b.n	8000caa <fsm_manual_run+0x382>
		case RED_GREEN:
			updateBufferLcd_run();
 8000ae8:	f000 ffd2 	bl	8001a90 <updateBufferLcd_run>
			led_red_green();
 8000aec:	f7ff fbe8 	bl	80002c0 <led_red_green>
			if(isButtonPressed(0)){
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fc65 	bl	80003c0 <isButtonPressed>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d024      	beq.n	8000b46 <fsm_manual_run+0x21e>
				setTimer(0, duration_yellow);
 8000afc:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fb22 	bl	800014c <setTimer>
				setTimer(2, 1000);
 8000b08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fb1d 	bl	800014c <setTimer>
				time_counter_2=duration_yellow/1000;
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000b18:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1c:	1192      	asrs	r2, r2, #6
 8000b1e:	17db      	asrs	r3, r3, #31
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000b24:	6013      	str	r3, [r2, #0]
				laststatus = RED_YELLOW;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <fsm_manual_run+0x294>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
				time_counter_2=duration_yellow/1000;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <fsm_manual_run+0x2b8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000b38:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3c:	1192      	asrs	r2, r2, #6
 8000b3e:	17db      	asrs	r3, r3, #31
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000b44:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(1)==1){
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fc3a 	bl	80003c0 <isButtonPressed>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	f040 80ad 	bne.w	8000cae <fsm_manual_run+0x386>
				status=laststatus;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <fsm_manual_run+0x294>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <fsm_manual_run+0x298>)
 8000b5a:	6013      	str	r3, [r2, #0]
				laststatus=WAIT;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <fsm_manual_run+0x294>)
 8000b5e:	2205      	movs	r2, #5
 8000b60:	601a      	str	r2, [r3, #0]
				mode=0;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <fsm_manual_run+0x29c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
				setTimer(0, duration_green);
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <fsm_manual_run+0x2a0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff faec 	bl	800014c <setTimer>
				setTimer(2, 1000);
 8000b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fae7 	bl	800014c <setTimer>
				time_counter_1=duration_red/1000;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <fsm_manual_run+0x2ac>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000b84:	fb82 1203 	smull	r1, r2, r2, r3
 8000b88:	1192      	asrs	r2, r2, #6
 8000b8a:	17db      	asrs	r3, r3, #31
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <fsm_manual_run+0x2a8>)
 8000b90:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_green/1000;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <fsm_manual_run+0x2a0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1192      	asrs	r2, r2, #6
 8000b9e:	17db      	asrs	r3, r3, #31
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <fsm_manual_run+0x2b0>)
 8000ba4:	6013      	str	r3, [r2, #0]
				setting_time = duration_red/1000;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <fsm_manual_run+0x2ac>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <fsm_manual_run+0x2a4>)
 8000bac:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb0:	1192      	asrs	r2, r2, #6
 8000bb2:	17db      	asrs	r3, r3, #31
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <fsm_manual_run+0x2b4>)
 8000bb8:	6013      	str	r3, [r2, #0]
			}
			break;
 8000bba:	e078      	b.n	8000cae <fsm_manual_run+0x386>
 8000bbc:	20000054 	.word	0x20000054
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000108 	.word	0x20000108
 8000bc8:	20000060 	.word	0x20000060
 8000bcc:	10624dd3 	.word	0x10624dd3
 8000bd0:	20000110 	.word	0x20000110
 8000bd4:	20000058 	.word	0x20000058
 8000bd8:	20000114 	.word	0x20000114
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	2000005c 	.word	0x2000005c
		case RED_YELLOW:
			updateBufferLcd_run();
 8000be4:	f000 ff54 	bl	8001a90 <updateBufferLcd_run>
			led_red_yellow();
 8000be8:	f7ff fb8a 	bl	8000300 <led_red_yellow>
			if(isTimerExpired(0)){
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff faed 	bl	80001cc <isTimerExpired>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00a      	beq.n	8000c0e <fsm_manual_run+0x2e6>
				clearTimer();
 8000bf8:	f7ff fac8 	bl	800018c <clearTimer>
				laststatus = GREEN_RED;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <fsm_manual_run+0x390>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
				time_counter_1=0;
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <fsm_manual_run+0x394>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
				time_counter_2=0;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <fsm_manual_run+0x398>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(2)){
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fadc 	bl	80001cc <isTimerExpired>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d009      	beq.n	8000c2e <fsm_manual_run+0x306>
				setTimer(2, 1000);
 8000c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fa94 	bl	800014c <setTimer>
				time_counter_2--;
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <fsm_manual_run+0x398>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <fsm_manual_run+0x398>)
 8000c2c:	6013      	str	r3, [r2, #0]
			}
			if(isButtonPressed(1)){
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff fbc6 	bl	80003c0 <isButtonPressed>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d03b      	beq.n	8000cb2 <fsm_manual_run+0x38a>
				status=laststatus;
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <fsm_manual_run+0x390>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <fsm_manual_run+0x39c>)
 8000c40:	6013      	str	r3, [r2, #0]
				laststatus=WAIT;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <fsm_manual_run+0x390>)
 8000c44:	2205      	movs	r2, #5
 8000c46:	601a      	str	r2, [r3, #0]
				mode=0;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <fsm_manual_run+0x3a0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
				setTimer(0, duration_yellow);
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <fsm_manual_run+0x3a4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4619      	mov	r1, r3
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fa79 	bl	800014c <setTimer>
				setTimer(2, 1000);
 8000c5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fa74 	bl	800014c <setTimer>
				time_counter_1=duration_yellow/1000;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <fsm_manual_run+0x3a4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <fsm_manual_run+0x3a8>)
 8000c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6e:	1192      	asrs	r2, r2, #6
 8000c70:	17db      	asrs	r3, r3, #31
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <fsm_manual_run+0x394>)
 8000c76:	6013      	str	r3, [r2, #0]
				time_counter_2=duration_yellow/1000;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <fsm_manual_run+0x3a4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <fsm_manual_run+0x3a8>)
 8000c7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c82:	1192      	asrs	r2, r2, #6
 8000c84:	17db      	asrs	r3, r3, #31
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <fsm_manual_run+0x398>)
 8000c8a:	6013      	str	r3, [r2, #0]
				setting_time = duration_red/1000;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <fsm_manual_run+0x3ac>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <fsm_manual_run+0x3a8>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1192      	asrs	r2, r2, #6
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <fsm_manual_run+0x3b0>)
 8000c9e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000ca0:	e007      	b.n	8000cb2 <fsm_manual_run+0x38a>
		case WAIT:
			break;
 8000ca2:	bf00      	nop
 8000ca4:	e006      	b.n	8000cb4 <fsm_manual_run+0x38c>
			break;
 8000ca6:	bf00      	nop
 8000ca8:	e004      	b.n	8000cb4 <fsm_manual_run+0x38c>
			break;
 8000caa:	bf00      	nop
 8000cac:	e002      	b.n	8000cb4 <fsm_manual_run+0x38c>
			break;
 8000cae:	bf00      	nop
 8000cb0:	e000      	b.n	8000cb4 <fsm_manual_run+0x38c>
			break;
 8000cb2:	bf00      	nop
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	20000110 	.word	0x20000110
 8000cc0:	20000114 	.word	0x20000114
 8000cc4:	2000010c 	.word	0x2000010c
 8000cc8:	20000108 	.word	0x20000108
 8000ccc:	2000005c 	.word	0x2000005c
 8000cd0:	10624dd3 	.word	0x10624dd3
 8000cd4:	20000058 	.word	0x20000058
 8000cd8:	20000118 	.word	0x20000118

08000cdc <fsm_setting_run>:
 *  Created on: Oct 28, 2024
 *      Author: LENOVO
 */

#include <fsm_setting.h>
void fsm_setting_run(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	switch(modee){
 8000ce0:	4ba2      	ldr	r3, [pc, #648]	; (8000f6c <fsm_setting_run+0x290>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3b05      	subs	r3, #5
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	f200 813e 	bhi.w	8000f68 <fsm_setting_run+0x28c>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <fsm_setting_run+0x18>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000f5b 	.word	0x08000f5b
 8000cf8:	08000d05 	.word	0x08000d05
 8000cfc:	08000dcd 	.word	0x08000dcd
 8000d00:	08000e95 	.word	0x08000e95
	case MODIFY_RED:
		updateBufferLcd_run();
 8000d04:	f000 fec4 	bl	8001a90 <updateBufferLcd_run>
		if(time_counter_1==0){
 8000d08:	4b99      	ldr	r3, [pc, #612]	; (8000f70 <fsm_setting_run+0x294>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <fsm_setting_run+0x3e>
			time_counter_1=1;
 8000d10:	4b97      	ldr	r3, [pc, #604]	; (8000f70 <fsm_setting_run+0x294>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
			TogglePinRED();
 8000d16:	f7ff fb13 	bl	8000340 <TogglePinRED>
		}
		if(isButtonPressed(0)){
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fb50 	bl	80003c0 <isButtonPressed>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d013      	beq.n	8000d4e <fsm_setting_run+0x72>
			mode=2;
 8000d26:	4b93      	ldr	r3, [pc, #588]	; (8000f74 <fsm_setting_run+0x298>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
			modee = MODIFY_YELLOW;
 8000d2c:	4b8f      	ldr	r3, [pc, #572]	; (8000f6c <fsm_setting_run+0x290>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	601a      	str	r2, [r3, #0]
			init_trafficlight();
 8000d32:	f7ff fa65 	bl	8000200 <init_trafficlight>
			setting_time = duration_yellow/1000;
 8000d36:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <fsm_setting_run+0x29c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a90      	ldr	r2, [pc, #576]	; (8000f7c <fsm_setting_run+0x2a0>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1192      	asrs	r2, r2, #6
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a8e      	ldr	r2, [pc, #568]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d48:	6013      	str	r3, [r2, #0]
			lcd_clear_display();
 8000d4a:	f000 f9c6 	bl	80010da <lcd_clear_display>
		}
		if(isButtonPressed(1)){
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fb36 	bl	80003c0 <isButtonPressed>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d015      	beq.n	8000d86 <fsm_setting_run+0xaa>
			setting_time = (setting_time+1)%100;
 8000d5a:	4b89      	ldr	r3, [pc, #548]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4b88      	ldr	r3, [pc, #544]	; (8000f84 <fsm_setting_run+0x2a8>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1159      	asrs	r1, r3, #5
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	2164      	movs	r1, #100	; 0x64
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	4a82      	ldr	r2, [pc, #520]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d76:	6013      	str	r3, [r2, #0]
			if(setting_time==0){
 8000d78:	4b81      	ldr	r3, [pc, #516]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <fsm_setting_run+0xaa>
				setting_time=1;
 8000d80:	4b7f      	ldr	r3, [pc, #508]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonLongPressed(0)){
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fb34 	bl	80003f4 <isButtonLongPressed>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 80e5 	beq.w	8000f5e <fsm_setting_run+0x282>
			init_trafficlight();
 8000d94:	f7ff fa34 	bl	8000200 <init_trafficlight>
			duration_green = setting_time*1000 - duration_yellow;
 8000d98:	4b79      	ldr	r3, [pc, #484]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da0:	fb02 f203 	mul.w	r2, r2, r3
 8000da4:	4b74      	ldr	r3, [pc, #464]	; (8000f78 <fsm_setting_run+0x29c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	4a77      	ldr	r2, [pc, #476]	; (8000f88 <fsm_setting_run+0x2ac>)
 8000dac:	6013      	str	r3, [r2, #0]
			duration_red = setting_time*1000;
 8000dae:	4b74      	ldr	r3, [pc, #464]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <fsm_setting_run+0x2b0>)
 8000dbc:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000dbe:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <fsm_setting_run+0x2b4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
			modee=WAIT;
 8000dc4:	4b69      	ldr	r3, [pc, #420]	; (8000f6c <fsm_setting_run+0x290>)
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dca:	e0c8      	b.n	8000f5e <fsm_setting_run+0x282>
	case MODIFY_YELLOW:
		updateBufferLcd_run();
 8000dcc:	f000 fe60 	bl	8001a90 <updateBufferLcd_run>
		if(time_counter_1==0){
 8000dd0:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <fsm_setting_run+0x294>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <fsm_setting_run+0x106>
			time_counter_1=1;
 8000dd8:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <fsm_setting_run+0x294>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
			TogglePinYELLOW();
 8000dde:	f7ff facb 	bl	8000378 <TogglePinYELLOW>
		}
		if(isButtonPressed(0)){
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff faec 	bl	80003c0 <isButtonPressed>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d013      	beq.n	8000e16 <fsm_setting_run+0x13a>
			mode=3;
 8000dee:	4b61      	ldr	r3, [pc, #388]	; (8000f74 <fsm_setting_run+0x298>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
			modee = MODIFY_GREEN;
 8000df4:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <fsm_setting_run+0x290>)
 8000df6:	2208      	movs	r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
			init_trafficlight();
 8000dfa:	f7ff fa01 	bl	8000200 <init_trafficlight>
			setting_time = duration_green/1000;
 8000dfe:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <fsm_setting_run+0x2ac>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <fsm_setting_run+0x2a0>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1192      	asrs	r2, r2, #6
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	4a5c      	ldr	r2, [pc, #368]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e10:	6013      	str	r3, [r2, #0]
			lcd_clear_display();
 8000e12:	f000 f962 	bl	80010da <lcd_clear_display>
		}
		if(isButtonPressed(1)){
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fad2 	bl	80003c0 <isButtonPressed>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <fsm_setting_run+0x172>
			setting_time = (setting_time+1)%100;
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <fsm_setting_run+0x2a8>)
 8000e2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2e:	1159      	asrs	r1, r3, #5
 8000e30:	17d3      	asrs	r3, r2, #31
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	2164      	movs	r1, #100	; 0x64
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	4a50      	ldr	r2, [pc, #320]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e3e:	6013      	str	r3, [r2, #0]
			if(setting_time==0){
 8000e40:	4b4f      	ldr	r3, [pc, #316]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <fsm_setting_run+0x172>
				setting_time=1;
 8000e48:	4b4d      	ldr	r3, [pc, #308]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonLongPressed(0)){
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fad0 	bl	80003f4 <isButtonLongPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8083 	beq.w	8000f62 <fsm_setting_run+0x286>
			init_trafficlight();
 8000e5c:	f7ff f9d0 	bl	8000200 <init_trafficlight>
			duration_yellow = setting_time*1000;
 8000e60:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <fsm_setting_run+0x29c>)
 8000e6e:	6013      	str	r3, [r2, #0]
			duration_red = setting_time*1000 + duration_green;
 8000e70:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e78:	fb02 f203 	mul.w	r2, r2, r3
 8000e7c:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <fsm_setting_run+0x2ac>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <fsm_setting_run+0x2b0>)
 8000e84:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <fsm_setting_run+0x2b4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
			modee=WAIT;
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <fsm_setting_run+0x290>)
 8000e8e:	2205      	movs	r2, #5
 8000e90:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e92:	e066      	b.n	8000f62 <fsm_setting_run+0x286>
	case MODIFY_GREEN:
		updateBufferLcd_run();
 8000e94:	f000 fdfc 	bl	8001a90 <updateBufferLcd_run>
		if(time_counter_1==0){
 8000e98:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <fsm_setting_run+0x294>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <fsm_setting_run+0x1ce>
			time_counter_1=1;
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <fsm_setting_run+0x294>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
			TogglePinGREEN();
 8000ea6:	f7ff fa79 	bl	800039c <TogglePinGREEN>
		}
		if(isButtonPressed(0)){
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fa88 	bl	80003c0 <isButtonPressed>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d013      	beq.n	8000ede <fsm_setting_run+0x202>
			mode=1;
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <fsm_setting_run+0x298>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
			modee = MODIFY_RED;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <fsm_setting_run+0x290>)
 8000ebe:	2206      	movs	r2, #6
 8000ec0:	601a      	str	r2, [r3, #0]
			init_trafficlight();
 8000ec2:	f7ff f99d 	bl	8000200 <init_trafficlight>
			setting_time = duration_red/1000;
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <fsm_setting_run+0x2b0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a2c      	ldr	r2, [pc, #176]	; (8000f7c <fsm_setting_run+0x2a0>)
 8000ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed0:	1192      	asrs	r2, r2, #6
 8000ed2:	17db      	asrs	r3, r3, #31
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000ed8:	6013      	str	r3, [r2, #0]
			lcd_clear_display();
 8000eda:	f000 f8fe 	bl	80010da <lcd_clear_display>
		}
		if(isButtonPressed(1)){
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fa6e 	bl	80003c0 <isButtonPressed>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d015      	beq.n	8000f16 <fsm_setting_run+0x23a>
			setting_time = (setting_time+1)%100;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <fsm_setting_run+0x2a8>)
 8000ef2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef6:	1159      	asrs	r1, r3, #5
 8000ef8:	17d3      	asrs	r3, r2, #31
 8000efa:	1acb      	subs	r3, r1, r3
 8000efc:	2164      	movs	r1, #100	; 0x64
 8000efe:	fb01 f303 	mul.w	r3, r1, r3
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000f06:	6013      	str	r3, [r2, #0]
			if(setting_time==0){
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <fsm_setting_run+0x23a>
				setting_time=1;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
			}
		}
		if(isButtonLongPressed(0)){
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fa6c 	bl	80003f4 <isButtonLongPressed>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d021      	beq.n	8000f66 <fsm_setting_run+0x28a>
			init_trafficlight();
 8000f22:	f7ff f96d 	bl	8000200 <init_trafficlight>
			duration_red = setting_time*1000 + duration_yellow;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2e:	fb02 f203 	mul.w	r2, r2, r3
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <fsm_setting_run+0x29c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <fsm_setting_run+0x2b0>)
 8000f3a:	6013      	str	r3, [r2, #0]
			duration_green = setting_time*1000;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <fsm_setting_run+0x2a4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <fsm_setting_run+0x2ac>)
 8000f4a:	6013      	str	r3, [r2, #0]
			status = INIT;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <fsm_setting_run+0x2b4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
			modee=WAIT;
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <fsm_setting_run+0x290>)
 8000f54:	2205      	movs	r2, #5
 8000f56:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f58:	e005      	b.n	8000f66 <fsm_setting_run+0x28a>
	case WAIT:
		break;
 8000f5a:	bf00      	nop
 8000f5c:	e004      	b.n	8000f68 <fsm_setting_run+0x28c>
		break;
 8000f5e:	bf00      	nop
 8000f60:	e002      	b.n	8000f68 <fsm_setting_run+0x28c>
		break;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <fsm_setting_run+0x28c>
		break;
 8000f66:	bf00      	nop
	}
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000050 	.word	0x20000050
 8000f70:	20000110 	.word	0x20000110
 8000f74:	20000108 	.word	0x20000108
 8000f78:	2000005c 	.word	0x2000005c
 8000f7c:	10624dd3 	.word	0x10624dd3
 8000f80:	20000118 	.word	0x20000118
 8000f84:	51eb851f 	.word	0x51eb851f
 8000f88:	20000060 	.word	0x20000060
 8000f8c:	20000058 	.word	0x20000058
 8000f90:	2000010c 	.word	0x2000010c

08000f94 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f023 030f 	bic.w	r3, r3, #15
 8000fa4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	f043 030c 	orr.w	r3, r3, #12
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	f043 030c 	orr.w	r3, r3, #12
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fd4:	f107 0208 	add.w	r2, r7, #8
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2304      	movs	r3, #4
 8000fde:	2142      	movs	r1, #66	; 0x42
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <lcd_send_cmd+0x5c>)
 8000fe2:	f001 fa83 	bl	80024ec <HAL_I2C_Master_Transmit>
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000017c 	.word	0x2000017c

08000ff4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f023 030f 	bic.w	r3, r3, #15
 8001004:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 030d 	orr.w	r3, r3, #13
 8001012:	b2db      	uxtb	r3, r3
 8001014:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f043 0309 	orr.w	r3, r3, #9
 800101c:	b2db      	uxtb	r3, r3
 800101e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	f043 030d 	orr.w	r3, r3, #13
 8001026:	b2db      	uxtb	r3, r3
 8001028:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	f043 0309 	orr.w	r3, r3, #9
 8001030:	b2db      	uxtb	r3, r3
 8001032:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2304      	movs	r3, #4
 800103e:	2142      	movs	r1, #66	; 0x42
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <lcd_send_data+0x5c>)
 8001042:	f001 fa53 	bl	80024ec <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000017c 	.word	0x2000017c

08001054 <lcd_init>:

void lcd_init (void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001058:	2033      	movs	r0, #51	; 0x33
 800105a:	f7ff ff9b 	bl	8000f94 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800105e:	2032      	movs	r0, #50	; 0x32
 8001060:	f7ff ff98 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f000 fddd 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800106a:	2028      	movs	r0, #40	; 0x28
 800106c:	f7ff ff92 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f000 fdd7 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ff8c 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	; 0x32
 800107e:	f000 fdd1 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001082:	2006      	movs	r0, #6
 8001084:	f7ff ff86 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f000 fdcb 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800108e:	200c      	movs	r0, #12
 8001090:	f7ff ff80 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 8001094:	2032      	movs	r0, #50	; 0x32
 8001096:	f000 fdc5 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800109a:	2002      	movs	r0, #2
 800109c:	f7ff ff7a 	bl	8000f94 <lcd_send_cmd>
	HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f000 fdbf 	bl	8001c24 <HAL_Delay>
	lcd_send_cmd (0x80);
 80010a6:	2080      	movs	r0, #128	; 0x80
 80010a8:	f7ff ff74 	bl	8000f94 <lcd_send_cmd>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80010b8:	e006      	b.n	80010c8 <lcd_send_string+0x18>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff96 	bl	8000ff4 <lcd_send_data>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f4      	bne.n	80010ba <lcd_send_string+0xa>
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <lcd_clear_display>:

void lcd_clear_display (void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff ff58 	bl	8000f94 <lcd_send_cmd>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	337f      	adds	r3, #127	; 0x7f
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e008      	b.n	800111c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3340      	adds	r3, #64	; 0x40
 8001110:	b2db      	uxtb	r3, r3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001118:	b25b      	sxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff38 	bl	8000f94 <lcd_send_cmd>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fd16 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f836 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 f91a 	bl	8001370 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800113c:	f000 f8ee 	bl	800131c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001140:	f000 f8a0 	bl	8001284 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001144:	f000 f870 	bl	8001228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <main+0x64>)
 800114a:	f002 f985 	bl	8003458 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init_trafficlight();
 800114e:	f7ff f857 	bl	8000200 <init_trafficlight>
  lcd_init();
 8001152:	f7ff ff7f 	bl	8001054 <lcd_init>
  lcd_clear_display();
 8001156:	f7ff ffc0 	bl	80010da <lcd_clear_display>
  lcd_goto_XY(1, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff ffc3 	bl	80010e8 <lcd_goto_XY>

  SCH_Add_Task(fsm_auto_run, 0, 10);
 8001162:	220a      	movs	r2, #10
 8001164:	2100      	movs	r1, #0
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <main+0x68>)
 8001168:	f000 f9b8 	bl	80014dc <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 1, 10);
 800116c:	220a      	movs	r2, #10
 800116e:	2101      	movs	r1, #1
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <main+0x6c>)
 8001172:	f000 f9b3 	bl	80014dc <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 2, 10);
 8001176:	220a      	movs	r2, #10
 8001178:	2102      	movs	r1, #2
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <main+0x70>)
 800117c:	f000 f9ae 	bl	80014dc <SCH_Add_Task>
  SCH_Add_Task(counter_1s, 100,100);
 8001180:	2264      	movs	r2, #100	; 0x64
 8001182:	2164      	movs	r1, #100	; 0x64
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <main+0x74>)
 8001186:	f000 f9a9 	bl	80014dc <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 SCH_Dispatch_Tasks();
 800118a:	f000 fa79 	bl	8001680 <SCH_Dispatch_Tasks>
 800118e:	e7fc      	b.n	800118a <main+0x5e>
 8001190:	200001d0 	.word	0x200001d0
 8001194:	080005a5 	.word	0x080005a5
 8001198:	08000cdd 	.word	0x08000cdd
 800119c:	08000929 	.word	0x08000929
 80011a0:	0800057d 	.word	0x0800057d

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	2228      	movs	r2, #40	; 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fdfa 	bl	8003dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2310      	movs	r3, #16
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fcd9 	bl	8002b9c <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011f0:	f000 f96e 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f001 ff44 	bl	800309c <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800121a:	f000 f959 	bl	80014d0 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f000 fffd 	bl	8002264 <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 f92e 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000017c 	.word	0x2000017c
 800127c:	40005400 	.word	0x40005400
 8001280:	000186a0 	.word	0x000186a0

08001284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_TIM2_Init+0x94>)
 80012b8:	2209      	movs	r2, #9
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM2_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_TIM2_Init+0x94>)
 80012ca:	f002 f875 	bl	80033b8 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d4:	f000 f8fc 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM2_Init+0x94>)
 80012e6:	f002 f9f9 	bl	80036dc <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 f8ee 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM2_Init+0x94>)
 8001302:	f002 fbdb 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f8e0 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001d0 	.word	0x200001d0

0800131c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f002 fc22 	bl	8003b9c <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f8b7 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000218 	.word	0x20000218
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <MX_GPIO_Init+0x134>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <MX_GPIO_Init+0x134>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <MX_GPIO_Init+0x134>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <MX_GPIO_Init+0x134>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013a2:	f043 0320 	orr.w	r3, r3, #32
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a34      	ldr	r2, [pc, #208]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <MX_GPIO_Init+0x134>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80013ea:	482f      	ldr	r0, [pc, #188]	; (80014a8 <MX_GPIO_Init+0x138>)
 80013ec:	f000 fee7 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <MX_GPIO_Init+0x13c>)
 80013f6:	f000 fee2 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	482c      	ldr	r0, [pc, #176]	; (80014b0 <MX_GPIO_Init+0x140>)
 8001400:	f000 fedd 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800140a:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_GPIO_Init+0x144>)
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	4824      	ldr	r0, [pc, #144]	; (80014ac <MX_GPIO_Init+0x13c>)
 800141a:	f000 fd35 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin;
 800141e:	2303      	movs	r3, #3
 8001420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	481d      	ldr	r0, [pc, #116]	; (80014a8 <MX_GPIO_Init+0x138>)
 8001432:	f000 fd29 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED2_A_Pin LED2_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_A_Pin|LED2_B_Pin;
 8001436:	f44f 7348 	mov.w	r3, #800	; 0x320
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4816      	ldr	r0, [pc, #88]	; (80014a8 <MX_GPIO_Init+0x138>)
 8001450:	f000 fd1a 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_A_Pin */
  GPIO_InitStruct.Pin = LED1_A_Pin;
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_A_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <MX_GPIO_Init+0x13c>)
 800146c:	f000 fd0c 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_B_Pin */
  GPIO_InitStruct.Pin = LED1_B_Pin;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2302      	movs	r3, #2
 800147e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_B_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	4619      	mov	r1, r3
 8001486:	480a      	ldr	r0, [pc, #40]	; (80014b0 <MX_GPIO_Init+0x140>)
 8001488:	f000 fcfe 	bl	8001e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f000 fcc2 	bl	8001e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001496:	2028      	movs	r0, #40	; 0x28
 8001498:	f000 fcdb 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	10110000 	.word	0x10110000

080014b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 SCH_Update();
 80014c0:	f000 f8ba 	bl	8001638 <SCH_Update>
 getKeyInput();
 80014c4:	f7fe ffb0 	bl	8000428 <getKeyInput>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <SCH_Add_Task>:
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++){
        SCH_Delete_Task(i);
    }
}
unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
 80014dc:	b4b0      	push	{r4, r5, r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	int prev;
	if(task_count >= SCH_MAX_TASKS){
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <SCH_Add_Task+0x154>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b27      	cmp	r3, #39	; 0x27
 80014ee:	dd01      	ble.n	80014f4 <SCH_Add_Task+0x18>
		return 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e097      	b.n	8001624 <SCH_Add_Task+0x148>
	}
	for(prev = 0; prev < task_count; prev++){
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e01a      	b.n	8001530 <SCH_Add_Task+0x54>
		if(DELAY < SCH_tasks_G[prev].Delay)
 80014fa:	494e      	ldr	r1, [pc, #312]	; (8001634 <SCH_Add_Task+0x158>)
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3304      	adds	r3, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d314      	bcc.n	800153c <SCH_Add_Task+0x60>
			break;
		DELAY -= SCH_tasks_G[prev].Delay;
 8001512:	4948      	ldr	r1, [pc, #288]	; (8001634 <SCH_Add_Task+0x158>)
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3304      	adds	r3, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	60bb      	str	r3, [r7, #8]
	for(prev = 0; prev < task_count; prev++){
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <SCH_Add_Task+0x154>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbdf      	blt.n	80014fa <SCH_Add_Task+0x1e>
 800153a:	e000      	b.n	800153e <SCH_Add_Task+0x62>
			break;
 800153c:	bf00      	nop
	}
	for (int i = task_count; i >prev; i--){
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <SCH_Add_Task+0x154>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	e017      	b.n	8001576 <SCH_Add_Task+0x9a>
		SCH_tasks_G[i] = SCH_tasks_G[i - 1];
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	483a      	ldr	r0, [pc, #232]	; (8001634 <SCH_Add_Task+0x158>)
 800154c:	6939      	ldr	r1, [r7, #16]
 800154e:	460b      	mov	r3, r1
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4418      	add	r0, r3
 8001558:	4936      	ldr	r1, [pc, #216]	; (8001634 <SCH_Add_Task+0x158>)
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	4604      	mov	r4, r0
 8001566:	461d      	mov	r5, r3
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	6023      	str	r3, [r4, #0]
	for (int i = task_count; i >prev; i--){
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3b01      	subs	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	dce3      	bgt.n	8001546 <SCH_Add_Task+0x6a>
	}
	SCH_tasks_G[prev].pTask = pFunction;
 800157e:	492d      	ldr	r1, [pc, #180]	; (8001634 <SCH_Add_Task+0x158>)
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[prev].Delay = DELAY;
 8001590:	4928      	ldr	r1, [pc, #160]	; (8001634 <SCH_Add_Task+0x158>)
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3304      	adds	r3, #4
 80015a0:	68ba      	ldr	r2, [r7, #8]
 80015a2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[prev].Period = PERIOD;
 80015a4:	4923      	ldr	r1, [pc, #140]	; (8001634 <SCH_Add_Task+0x158>)
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3308      	adds	r3, #8
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[prev].RunMe = 0;
 80015b8:	491e      	ldr	r1, [pc, #120]	; (8001634 <SCH_Add_Task+0x158>)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	330c      	adds	r3, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[prev].TaskID = prev;
 80015cc:	6979      	ldr	r1, [r7, #20]
 80015ce:	4819      	ldr	r0, [pc, #100]	; (8001634 <SCH_Add_Task+0x158>)
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4403      	add	r3, r0
 80015dc:	3310      	adds	r3, #16
 80015de:	6019      	str	r1, [r3, #0]
	task_count++;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <SCH_Add_Task+0x154>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <SCH_Add_Task+0x154>)
 80015e8:	6013      	str	r3, [r2, #0]
	if(prev + 1 < task_count + 1){
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <SCH_Add_Task+0x154>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	da15      	bge.n	8001620 <SCH_Add_Task+0x144>
		SCH_tasks_G[prev + 1].Delay -= DELAY;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <SCH_Add_Task+0x158>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3304      	adds	r3, #4
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1ac9      	subs	r1, r1, r3
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <SCH_Add_Task+0x158>)
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4403      	add	r3, r0
 800161c:	3304      	adds	r3, #4
 800161e:	6019      	str	r1, [r3, #0]
	}
	return prev;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	b2db      	uxtb	r3, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	bcb0      	pop	{r4, r5, r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000011c 	.word	0x2000011c
 8001634:	20000260 	.word	0x20000260

08001638 <SCH_Update>:
void SCH_Update(void){
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    if (SCH_tasks_G[0].pTask){
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <SCH_Update+0x44>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <SCH_Update+0x3c>
        if (SCH_tasks_G[0].Delay == 0){
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <SCH_Update+0x44>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10e      	bne.n	800166a <SCH_Update+0x32>
            SCH_tasks_G[0].RunMe++;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SCH_Update+0x44>)
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <SCH_Update+0x44>)
 8001656:	731a      	strb	r2, [r3, #12]
            if (SCH_tasks_G[0].Period){
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <SCH_Update+0x44>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <SCH_Update+0x3c>
                SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <SCH_Update+0x44>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <SCH_Update+0x44>)
 8001666:	6053      	str	r3, [r2, #4]
            }
        }else{
            SCH_tasks_G[0].Delay--;
        }
    }
}
 8001668:	e004      	b.n	8001674 <SCH_Update+0x3c>
            SCH_tasks_G[0].Delay--;
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SCH_Update+0x44>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	4a02      	ldr	r2, [pc, #8]	; (800167c <SCH_Update+0x44>)
 8001672:	6053      	str	r3, [r2, #4]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000260 	.word	0x20000260

08001680 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
    if (SCH_tasks_G[0].RunMe > 0){
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 8001688:	7b1b      	ldrb	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d020      	beq.n	80016d0 <SCH_Dispatch_Tasks+0x50>
    	SCH_tasks_G[0].RunMe -= 1;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	3b01      	subs	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 8001698:	731a      	strb	r2, [r3, #12]
        (*SCH_tasks_G[0].pTask)();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4798      	blx	r3
        if (SCH_tasks_G[0].Period == 0){
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <SCH_Dispatch_Tasks+0x30>
            SCH_Delete_Task(0);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 f817 	bl	80016dc <SCH_Delete_Task>
            sTask temp = SCH_tasks_G[0];
            SCH_Delete_Task(0);
            SCH_Add_Task(temp.pTask, temp.Delay, temp.Period);
        }
    }
}
 80016ae:	e00f      	b.n	80016d0 <SCH_Dispatch_Tasks+0x50>
            sTask temp = SCH_tasks_G[0];
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <SCH_Dispatch_Tasks+0x58>)
 80016b2:	1d3c      	adds	r4, r7, #4
 80016b4:	461d      	mov	r5, r3
 80016b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	6023      	str	r3, [r4, #0]
            SCH_Delete_Task(0);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f80c 	bl	80016dc <SCH_Delete_Task>
            SCH_Add_Task(temp.pTask, temp.Delay, temp.Period);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff06 	bl	80014dc <SCH_Add_Task>
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	20000260 	.word	0x20000260

080016dc <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const int TASK_INDEX){
 80016dc:	b4b0      	push	{r4, r5, r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if (TASK_INDEX != task_count- 1){
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <SCH_Delete_Task+0xf8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d02a      	beq.n	8001746 <SCH_Delete_Task+0x6a>
		for (int i = TASK_INDEX; i < task_count - 1; i++){
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e021      	b.n	800173a <SCH_Delete_Task+0x5e>
			SCH_tasks_G[i] = SCH_tasks_G[i + 1];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	4837      	ldr	r0, [pc, #220]	; (80017d8 <SCH_Delete_Task+0xfc>)
 80016fc:	68f9      	ldr	r1, [r7, #12]
 80016fe:	460b      	mov	r3, r1
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4418      	add	r0, r3
 8001708:	4933      	ldr	r1, [pc, #204]	; (80017d8 <SCH_Delete_Task+0xfc>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	4604      	mov	r4, r0
 8001716:	461d      	mov	r5, r3
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	6023      	str	r3, [r4, #0]
			SCH_tasks_G[i].TaskID = i;
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	482d      	ldr	r0, [pc, #180]	; (80017d8 <SCH_Delete_Task+0xfc>)
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4403      	add	r3, r0
 8001730:	3310      	adds	r3, #16
 8001732:	6019      	str	r1, [r3, #0]
		for (int i = TASK_INDEX; i < task_count - 1; i++){
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <SCH_Delete_Task+0xf8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbd7      	blt.n	80016f6 <SCH_Delete_Task+0x1a>
		}
	}
	SCH_tasks_G[task_count - 1].pTask = 0x0000;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <SCH_Delete_Task+0xf8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	4922      	ldr	r1, [pc, #136]	; (80017d8 <SCH_Delete_Task+0xfc>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_count - 1].Delay = 0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <SCH_Delete_Task+0xf8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	491d      	ldr	r1, [pc, #116]	; (80017d8 <SCH_Delete_Task+0xfc>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3304      	adds	r3, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_count - 1].Period = 0;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <SCH_Delete_Task+0xf8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	4917      	ldr	r1, [pc, #92]	; (80017d8 <SCH_Delete_Task+0xfc>)
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3308      	adds	r3, #8
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_count - 1].RunMe = 0;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <SCH_Delete_Task+0xf8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	4911      	ldr	r1, [pc, #68]	; (80017d8 <SCH_Delete_Task+0xfc>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	330c      	adds	r3, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[task_count - 1].TaskID = NO_TASK_ID;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <SCH_Delete_Task+0xf8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	490b      	ldr	r1, [pc, #44]	; (80017d8 <SCH_Delete_Task+0xfc>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3310      	adds	r3, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
	task_count--;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SCH_Delete_Task+0xf8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <SCH_Delete_Task+0xf8>)
 80017c4:	6013      	str	r3, [r2, #0]
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bcb0      	pop	{r4, r5, r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000011c 	.word	0x2000011c
 80017d8:	20000260 	.word	0x20000260

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_MspInit+0x5c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x5c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_MspInit+0x60>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_MspInit+0x60>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_I2C_MspInit+0x90>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d132      	bne.n	80018c6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001878:	f44f 7340 	mov.w	r3, #768	; 0x300
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <HAL_I2C_MspInit+0x98>)
 800188e:	f000 fafb 	bl	8001e88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_I2C_MspInit+0x9c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_I2C_MspInit+0x9c>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_I2C_MspInit+0x94>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d113      	bne.n	800191a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201c      	movs	r0, #28
 8001910:	f000 fa83 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001914:	201c      	movs	r0, #28
 8001916:	f000 fa9c 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_UART_MspInit+0x70>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d123      	bne.n	8001990 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_UART_MspInit+0x74>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_UART_MspInit+0x74>)
 800194e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001952:	61d3      	str	r3, [r2, #28]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_UART_MspInit+0x74>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_UART_MspInit+0x74>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_UART_MspInit+0x74>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_UART_MspInit+0x74>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001978:	230c      	movs	r3, #12
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2302      	movs	r3, #2
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x78>)
 800198c:	f000 fa7c 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004400 	.word	0x40004400
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f8ff 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f001 fd7f 	bl	80034fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200001d0 	.word	0x200001d0

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a10:	f000 fc06 	bl	8002220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f002 f986 	bl	8003d58 <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20005000 	.word	0x20005000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000120 	.word	0x20000120
 8001a80:	200005a8 	.word	0x200005a8

08001a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <updateBufferLcd_run>:
 *      Author: LENOVO
 */

#include "updateBufferLcd.h"
char buffer[16];
void updateBufferLcd_run(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	    lcd_goto_XY(0, 0);
 8001a94:	2100      	movs	r1, #0
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fb26 	bl	80010e8 <lcd_goto_XY>
	    sprintf(buffer, "MODE:%d", mode);
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <updateBufferLcd_run+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4915      	ldr	r1, [pc, #84]	; (8001af8 <updateBufferLcd_run+0x68>)
 8001aa4:	4815      	ldr	r0, [pc, #84]	; (8001afc <updateBufferLcd_run+0x6c>)
 8001aa6:	f002 f989 	bl	8003dbc <siprintf>
	    lcd_send_string(buffer);
 8001aaa:	4814      	ldr	r0, [pc, #80]	; (8001afc <updateBufferLcd_run+0x6c>)
 8001aac:	f7ff fb00 	bl	80010b0 <lcd_send_string>

	    lcd_goto_XY(1, 0);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f7ff fb18 	bl	80010e8 <lcd_goto_XY>
	    if (mode == 0 || mode == 4) {
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <updateBufferLcd_run+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <updateBufferLcd_run+0x38>
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <updateBufferLcd_run+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d108      	bne.n	8001ada <updateBufferLcd_run+0x4a>
	        sprintf(buffer, "LED1:%d  LED2:%d", time_counter_1, time_counter_2);
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <updateBufferLcd_run+0x70>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <updateBufferLcd_run+0x74>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	490d      	ldr	r1, [pc, #52]	; (8001b08 <updateBufferLcd_run+0x78>)
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <updateBufferLcd_run+0x6c>)
 8001ad4:	f002 f972 	bl	8003dbc <siprintf>
 8001ad8:	e006      	b.n	8001ae8 <updateBufferLcd_run+0x58>
	    }
	    else {
	        sprintf(buffer, "LED2:%d", setting_time);
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <updateBufferLcd_run+0x7c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	490b      	ldr	r1, [pc, #44]	; (8001b10 <updateBufferLcd_run+0x80>)
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <updateBufferLcd_run+0x6c>)
 8001ae4:	f002 f96a 	bl	8003dbc <siprintf>
	    }
	    lcd_send_string(buffer);
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <updateBufferLcd_run+0x6c>)
 8001aea:	f7ff fae1 	bl	80010b0 <lcd_send_string>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000108 	.word	0x20000108
 8001af8:	08004648 	.word	0x08004648
 8001afc:	20000580 	.word	0x20000580
 8001b00:	20000110 	.word	0x20000110
 8001b04:	20000114 	.word	0x20000114
 8001b08:	08004650 	.word	0x08004650
 8001b0c:	20000118 	.word	0x20000118
 8001b10:	08004664 	.word	0x08004664

08001b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff ffb6 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b30:	4c09      	ldr	r4, [pc, #36]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f002 f911 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b42:	f7ff faf3 	bl	800112c <main>
  bx lr
 8001b46:	4770      	bx	lr
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001b50:	080046d4 	.word	0x080046d4
  ldr r2, =_sbss
 8001b54:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001b58:	200005a4 	.word	0x200005a4

08001b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC1_2_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_Init+0x28>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_Init+0x28>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 f947 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fe2e 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f95f 	bl	8001e6e <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 f927 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000064 	.word	0x20000064
 8001be4:	2000006c 	.word	0x2000006c
 8001be8:	20000068 	.word	0x20000068

08001bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_IncTick+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_IncTick+0x20>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <HAL_IncTick+0x20>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	2000006c 	.word	0x2000006c
 8001c0c:	20000590 	.word	0x20000590

08001c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_GetTick+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000590 	.word	0x20000590

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff fff0 	bl	8001c10 <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffe0 	bl	8001c10 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000006c 	.word	0x2000006c

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4906      	ldr	r1, [pc, #24]	; (8001d04 <__NVIC_EnableIRQ+0x34>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff90 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff2d 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff42 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff35 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e169      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8158 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a9a      	ldr	r2, [pc, #616]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d875      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eca:	4a98      	ldr	r2, [pc, #608]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d058      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d86f      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a96      	ldr	r2, [pc, #600]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d052      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001edc:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d869      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04c      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d863      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eee:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d046      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d85d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d82a      	bhi.n	8001f54 <HAL_GPIO_Init+0xcc>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d859      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_GPIO_Init+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f6f 	.word	0x08001f6f
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fb7 	.word	0x08001fb7
 8001f1c:	08001fb7 	.word	0x08001fb7
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08001fb7 	.word	0x08001fb7
 8001f28:	08001fb7 	.word	0x08001fb7
 8001f2c:	08001fb7 	.word	0x08001fb7
 8001f30:	08001fb7 	.word	0x08001fb7
 8001f34:	08001fb7 	.word	0x08001fb7
 8001f38:	08001fb7 	.word	0x08001fb7
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001fb7 	.word	0x08001fb7
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fb7 	.word	0x08001fb7
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_GPIO_Init+0x2b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e02c      	b.n	8001fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e029      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e024      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	3308      	adds	r3, #8
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e01f      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e01a      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
          break;
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          break;
 8001fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d801      	bhi.n	8001fc2 <HAL_GPIO_Init+0x13a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e001      	b.n	8001fc6 <HAL_GPIO_Init+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_GPIO_Init+0x14c>
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x152>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3b08      	subs	r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b1 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_GPIO_Init+0x2c0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1ec>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_GPIO_Init+0x2c4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1e8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_GPIO_Init+0x2c8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e0>
 8002064:	2303      	movs	r3, #3
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002068:	2304      	movs	r3, #4
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002074:	2300      	movs	r3, #0
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002086:	492f      	ldr	r1, [pc, #188]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	492c      	ldr	r1, [pc, #176]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4928      	ldr	r1, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4914      	ldr	r1, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d021      	beq.n	800215c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e021      	b.n	800216a <HAL_GPIO_Init+0x2e2>
 8002126:	bf00      	nop
 8002128:	10320000 	.word	0x10320000
 800212c:	10310000 	.word	0x10310000
 8002130:	10220000 	.word	0x10220000
 8002134:	10210000 	.word	0x10210000
 8002138:	10120000 	.word	0x10120000
 800213c:	10110000 	.word	0x10110000
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	40010800 	.word	0x40010800
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_GPIO_Init+0x304>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <HAL_GPIO_Init+0x304>)
 8002166:	4013      	ands	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f ae8e 	bne.w	8001e9c <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43d9      	mvns	r1, r3
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	400b      	ands	r3, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f806 	bl	8002250 <HAL_GPIO_EXTI_Callback>
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e12b      	b.n	80024ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fad8 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c8:	f001 f830 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 80022cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <HAL_I2C_Init+0x274>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d807      	bhi.n	80022e8 <HAL_I2C_Init+0x84>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4a80      	ldr	r2, [pc, #512]	; (80024dc <HAL_I2C_Init+0x278>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	bf94      	ite	ls
 80022e0:	2301      	movls	r3, #1
 80022e2:	2300      	movhi	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e006      	b.n	80022f6 <HAL_I2C_Init+0x92>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a7d      	ldr	r2, [pc, #500]	; (80024e0 <HAL_I2C_Init+0x27c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0e7      	b.n	80024ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a78      	ldr	r2, [pc, #480]	; (80024e4 <HAL_I2C_Init+0x280>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0c9b      	lsrs	r3, r3, #18
 8002308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_I2C_Init+0x274>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d802      	bhi.n	8002338 <HAL_I2C_Init+0xd4>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3301      	adds	r3, #1
 8002336:	e009      	b.n	800234c <HAL_I2C_Init+0xe8>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	4a69      	ldr	r2, [pc, #420]	; (80024e8 <HAL_I2C_Init+0x284>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	3301      	adds	r3, #1
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800235e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	495c      	ldr	r1, [pc, #368]	; (80024d8 <HAL_I2C_Init+0x274>)
 8002368:	428b      	cmp	r3, r1
 800236a:	d819      	bhi.n	80023a0 <HAL_I2C_Init+0x13c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e59      	subs	r1, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fbb1 f3f3 	udiv	r3, r1, r3
 800237a:	1c59      	adds	r1, r3, #1
 800237c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002380:	400b      	ands	r3, r1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_I2C_Init+0x138>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e59      	subs	r1, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fbb1 f3f3 	udiv	r3, r1, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	e051      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 800239c:	2304      	movs	r3, #4
 800239e:	e04f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d111      	bne.n	80023cc <HAL_I2C_Init+0x168>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e012      	b.n	80023f2 <HAL_I2C_Init+0x18e>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	0099      	lsls	r1, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x196>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e022      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <HAL_I2C_Init+0x1bc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e58      	subs	r0, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	440b      	add	r3, r1
 8002410:	fbb0 f3f3 	udiv	r3, r0, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241e:	e00f      	b.n	8002440 <HAL_I2C_Init+0x1dc>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	0099      	lsls	r1, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	fbb0 f3f3 	udiv	r3, r0, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	6809      	ldr	r1, [r1, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69da      	ldr	r2, [r3, #28]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800246e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6911      	ldr	r1, [r2, #16]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	000186a0 	.word	0x000186a0
 80024dc:	001e847f 	.word	0x001e847f
 80024e0:	003d08ff 	.word	0x003d08ff
 80024e4:	431bde83 	.word	0x431bde83
 80024e8:	10624dd3 	.word	0x10624dd3

080024ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	461a      	mov	r2, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
 80024fc:	4613      	mov	r3, r2
 80024fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fb86 	bl	8001c10 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	f040 80e0 	bne.w	80026d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2319      	movs	r3, #25
 800251a:	2201      	movs	r2, #1
 800251c:	4970      	ldr	r1, [pc, #448]	; (80026e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f964 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	e0d3      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_I2C_Master_Transmit+0x50>
 8002538:	2302      	movs	r3, #2
 800253a:	e0cc      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2210      	movs	r2, #16
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f89c 	bl	80026e8 <I2C_MasterRequestWrite>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e08d      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d0:	e066      	b.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa22 	bl	8002a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00d      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d107      	bne.n	80025fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11b      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x188>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	6a39      	ldr	r1, [r7, #32]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fa19 	bl	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b04      	cmp	r3, #4
 800268a:	d107      	bne.n	800269c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d194      	bne.n	80025d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	00100002 	.word	0x00100002
 80026e4:	ffff0000 	.word	0xffff0000

080026e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d006      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d003      	beq.n	8002712 <I2C_MasterRequestWrite+0x2a>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002710:	d108      	bne.n	8002724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	2b12      	cmp	r3, #18
 800272a:	d107      	bne.n	800273c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f84f 	bl	80027ec <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d103      	bne.n	800276c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e035      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002778:	d108      	bne.n	800278c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	e01b      	b.n	80027c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800278c:	897b      	ldrh	r3, [r7, #10]
 800278e:	11db      	asrs	r3, r3, #7
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0306 	and.w	r3, r3, #6
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f063 030f 	orn	r3, r3, #15
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <I2C_MasterRequestWrite+0xfc>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f898 	bl	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e010      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <I2C_MasterRequestWrite+0x100>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f888 	bl	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00010008 	.word	0x00010008
 80027e8:	00010002 	.word	0x00010002

080027ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	e048      	b.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d044      	beq.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7ff fa03 	bl	8001c10 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d139      	bne.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10d      	bne.n	8002842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	e00c      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	429a      	cmp	r2, r3
 8002860:	d116      	bne.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e023      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10d      	bne.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	e00c      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	43da      	mvns	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d093      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ee:	e071      	b.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d123      	bne.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e067      	b.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d041      	beq.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7ff f95e 	bl	8001c10 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d136      	bne.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10c      	bne.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e00b      	b.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	43da      	mvns	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e021      	b.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10c      	bne.n	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e00b      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f af6d 	bne.w	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f886 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e034      	b.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d028      	beq.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7ff f8e3 	bl	8001c10 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11d      	bne.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d1c3      	bne.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002abc:	e034      	b.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f83e 	bl	8002b40 <I2C_IsAcknowledgeFailed>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e034      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d028      	beq.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7ff f89b 	bl	8001c10 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11d      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d016      	beq.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d1c3      	bne.n	8002abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d11b      	bne.n	8002b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e26c      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8087 	beq.w	8002cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc8:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d112      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d10b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be2:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d168      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e246      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x76>
 8002c04:	4b80      	ldr	r3, [pc, #512]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e02e      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0xbc>
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a71      	ldr	r2, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xd4>
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe ffca 	bl	8001c10 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe ffc6 	bl	8001c10 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1fa      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xe4>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe ffb6 	bl	8001c10 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe ffb2 	bl	8001c10 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1e6      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x10c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce2:	4b49      	ldr	r3, [pc, #292]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1ba      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4939      	ldr	r1, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe ff6b 	bl	8001c10 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe ff67 	bl	8001c10 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e19b      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4927      	ldr	r1, [pc, #156]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe ff4a 	bl	8001c10 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe ff46 	bl	8001c10 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e17a      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03a      	beq.n	8002e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7fe ff2a 	bl	8001c10 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe ff26 	bl	8001c10 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e15a      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 facc 	bl	800337c <RCC_Delay>
 8002de4:	e01c      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7fe ff10 	bl	8001c10 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df2:	e00f      	b.n	8002e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe ff0c 	bl	8001c10 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e140      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	42420000 	.word	0x42420000
 8002e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b9e      	ldr	r3, [pc, #632]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e9      	bne.n	8002df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a6 	beq.w	8002f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b97      	ldr	r3, [pc, #604]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b94      	ldr	r3, [pc, #592]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a93      	ldr	r2, [pc, #588]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b8e      	ldr	r3, [pc, #568]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8a      	ldr	r2, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fe fecd 	bl	8001c10 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7a:	f7fe fec9 	bl	8001c10 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b64      	cmp	r3, #100	; 0x64
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0fd      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002ea0:	4b7b      	ldr	r3, [pc, #492]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4a7a      	ldr	r2, [pc, #488]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6213      	str	r3, [r2, #32]
 8002eac:	e02d      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x334>
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a75      	ldr	r2, [pc, #468]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a72      	ldr	r2, [pc, #456]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
 8002ece:	e01c      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x356>
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a6c      	ldr	r2, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	f043 0304 	orr.w	r3, r3, #4
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a69      	ldr	r2, [pc, #420]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e00b      	b.n	8002f0a <HAL_RCC_OscConfig+0x36e>
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a66      	ldr	r2, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fe7d 	bl	8001c10 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fe79 	bl	8001c10 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0ab      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	4b57      	ldr	r3, [pc, #348]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ee      	beq.n	8002f1a <HAL_RCC_OscConfig+0x37e>
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fe67 	bl	8001c10 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fe fe63 	bl	8001c10 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e095      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ee      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b48      	ldr	r3, [pc, #288]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a47      	ldr	r2, [pc, #284]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 8081 	beq.w	8003086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d061      	beq.n	8003054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d146      	bne.n	8003026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fe37 	bl	8001c10 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fe33 	bl	8001c10 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e067      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	492d      	ldr	r1, [pc, #180]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a19      	ldr	r1, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	4927      	ldr	r1, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fe07 	bl	8001c10 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe fe03 	bl	8001c10 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e037      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
 8003024:	e02f      	b.n	8003086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_RCC_OscConfig+0x4fc>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fdf0 	bl	8001c10 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fdec 	bl	8001c10 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e020      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x498>
 8003052:	e018      	b.n	8003086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e013      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	429a      	cmp	r2, r3
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	42420060 	.word	0x42420060

0800309c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d0      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d910      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0207 	bic.w	r2, r3, #7
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d040      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d115      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e073      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe fd40 	bl	8001c10 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fd3c 	bl	8001c10 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e053      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4922      	ldr	r1, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1cc>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fc9e 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	0800466c 	.word	0x0800466c
 8003268:	20000064 	.word	0x20000064
 800326c:	20000068 	.word	0x20000068

08003270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x30>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x36>
 800329e:	e027      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032a2:	613b      	str	r3, [r7, #16]
      break;
 80032a4:	e027      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCC_GetSysClockFreq+0x9c>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0c5b      	lsrs	r3, r3, #17
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032ca:	5cd3      	ldrb	r3, [r2, r3]
 80032cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032d2:	fb02 f203 	mul.w	r2, r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e004      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	613b      	str	r3, [r7, #16]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetSysClockFreq+0x98>)
 80032f2:	613b      	str	r3, [r7, #16]
      break;
 80032f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f6:	693b      	ldr	r3, [r7, #16]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	007a1200 	.word	0x007a1200
 800330c:	08004684 	.word	0x08004684
 8003310:	08004694 	.word	0x08004694
 8003314:	003d0900 	.word	0x003d0900

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b02      	ldr	r3, [pc, #8]	; (8003328 <HAL_RCC_GetHCLKFreq+0x10>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000064 	.word	0x20000064

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003330:	f7ff fff2 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	0800467c 	.word	0x0800467c

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003358:	f7ff ffde 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	0800467c 	.word	0x0800467c

0800337c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <RCC_Delay+0x34>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <RCC_Delay+0x38>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003398:	bf00      	nop
  }
  while (Delay --);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	60fa      	str	r2, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <RCC_Delay+0x1c>
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000064 	.word	0x20000064
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fa7e 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fa5c 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e03a      	b.n	80034e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_TIM_Base_Start_IT+0x98>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d009      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d111      	bne.n	80034d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d010      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	e007      	b.n	80034e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800

080034fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d020      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0202 	mvn.w	r2, #2
 8003530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f998 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f98b 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f99a 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d020      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0204 	mvn.w	r2, #4
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f972 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f965 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f974 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d020      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0208 	mvn.w	r2, #8
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f94c 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f93f 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f94e 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0210 	mvn.w	r2, #16
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2208      	movs	r2, #8
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f926 	bl	800387c <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f919 	bl	800386a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f928 	bl	800388e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0201 	mvn.w	r2, #1
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd ff28 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa7f 	bl	8003b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8f8 	bl	80038a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00c      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0220 	mvn.w	r2, #32
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa52 	bl	8003b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_ConfigClockSource+0x1c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0b4      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x186>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d03e      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	f200 8087 	bhi.w	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	f000 8086 	beq.w	800384e <HAL_TIM_ConfigClockSource+0x172>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	d87f      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b70      	cmp	r3, #112	; 0x70
 800374a:	d01a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xa6>
 800374c:	2b70      	cmp	r3, #112	; 0x70
 800374e:	d87b      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b60      	cmp	r3, #96	; 0x60
 8003752:	d050      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003754:	2b60      	cmp	r3, #96	; 0x60
 8003756:	d877      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b50      	cmp	r3, #80	; 0x50
 800375a:	d03c      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xfa>
 800375c:	2b50      	cmp	r3, #80	; 0x50
 800375e:	d873      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d058      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x13a>
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d86f      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b30      	cmp	r3, #48	; 0x30
 800376a:	d064      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b30      	cmp	r3, #48	; 0x30
 800376e:	d86b      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d060      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d867      	bhi.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05c      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b10      	cmp	r3, #16
 800377e:	d05a      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	e062      	b.n	8003848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f000 f974 	bl	8003a7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	609a      	str	r2, [r3, #8]
      break;
 80037ae:	e04f      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f000 f95d 	bl	8003a7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d2:	609a      	str	r2, [r3, #8]
      break;
 80037d4:	e03c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 f8d4 	bl	8003990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2150      	movs	r1, #80	; 0x50
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f92b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 80037f4:	e02c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 f8f2 	bl	80039ec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2160      	movs	r1, #96	; 0x60
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f91b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003814:	e01c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	461a      	mov	r2, r3
 8003824:	f000 f8b4 	bl	8003990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f90b 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003834:	e00c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f000 f902 	bl	8003a4a <TIM_ITRx_SetConfig>
      break;
 8003846:	e003      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e000      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800384e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
	...

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <TIM_Base_SetConfig+0xd0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <TIM_Base_SetConfig+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x30>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <TIM_Base_SetConfig+0xd8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a22      	ldr	r2, [pc, #136]	; (8003984 <TIM_Base_SetConfig+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d007      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <TIM_Base_SetConfig+0xd4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_Base_SetConfig+0x62>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1e      	ldr	r2, [pc, #120]	; (800398c <TIM_Base_SetConfig+0xd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <TIM_Base_SetConfig+0xd0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d103      	bne.n	800395c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f023 0201 	bic.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]
  }
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 030a 	bic.w	r3, r3, #10
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f023 0210 	bic.w	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f043 0307 	orr.w	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr

08003a7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021a      	lsls	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e046      	b.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d009      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10c      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800

08003b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e042      	b.n	8003c34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd feb0 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f82b 	bl	8003c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c76:	f023 030c 	bic.w	r3, r3, #12
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <UART_SetConfig+0x114>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d103      	bne.n	8003cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7ff fb56 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	e002      	b.n	8003cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7ff fb3e 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <UART_SetConfig+0x118>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	0119      	lsls	r1, r3, #4
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	; 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	; 0x32
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d08:	4419      	add	r1, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <UART_SetConfig+0x118>)
 8003d22:	fba3 0302 	umull	r0, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2064      	movs	r0, #100	; 0x64
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	; 0x32
 8003d34:	4a07      	ldr	r2, [pc, #28]	; (8003d54 <UART_SetConfig+0x118>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	440a      	add	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40013800 	.word	0x40013800
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <__errno>:
 8003d58:	4b01      	ldr	r3, [pc, #4]	; (8003d60 <__errno+0x8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000070 	.word	0x20000070

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2600      	movs	r6, #0
 8003d68:	4d0c      	ldr	r5, [pc, #48]	; (8003d9c <__libc_init_array+0x38>)
 8003d6a:	4c0d      	ldr	r4, [pc, #52]	; (8003da0 <__libc_init_array+0x3c>)
 8003d6c:	1b64      	subs	r4, r4, r5
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	42a6      	cmp	r6, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	f000 fc5c 	bl	8004630 <_init>
 8003d78:	2600      	movs	r6, #0
 8003d7a:	4d0a      	ldr	r5, [pc, #40]	; (8003da4 <__libc_init_array+0x40>)
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <__libc_init_array+0x44>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	42a6      	cmp	r6, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8c:	4798      	blx	r3
 8003d8e:	3601      	adds	r6, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d96:	4798      	blx	r3
 8003d98:	3601      	adds	r6, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	080046cc 	.word	0x080046cc
 8003da0:	080046cc 	.word	0x080046cc
 8003da4:	080046cc 	.word	0x080046cc
 8003da8:	080046d0 	.word	0x080046d0

08003dac <memset>:
 8003dac:	4603      	mov	r3, r0
 8003dae:	4402      	add	r2, r0
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d100      	bne.n	8003db6 <memset+0xa>
 8003db4:	4770      	bx	lr
 8003db6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dba:	e7f9      	b.n	8003db0 <memset+0x4>

08003dbc <siprintf>:
 8003dbc:	b40e      	push	{r1, r2, r3}
 8003dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc2:	b500      	push	{lr}
 8003dc4:	b09c      	sub	sp, #112	; 0x70
 8003dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003dc8:	9002      	str	r0, [sp, #8]
 8003dca:	9006      	str	r0, [sp, #24]
 8003dcc:	9107      	str	r1, [sp, #28]
 8003dce:	9104      	str	r1, [sp, #16]
 8003dd0:	4808      	ldr	r0, [pc, #32]	; (8003df4 <siprintf+0x38>)
 8003dd2:	4909      	ldr	r1, [pc, #36]	; (8003df8 <siprintf+0x3c>)
 8003dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	a902      	add	r1, sp, #8
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	f000 f868 	bl	8003eb4 <_svfiprintf_r>
 8003de4:	2200      	movs	r2, #0
 8003de6:	9b02      	ldr	r3, [sp, #8]
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	b01c      	add	sp, #112	; 0x70
 8003dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df0:	b003      	add	sp, #12
 8003df2:	4770      	bx	lr
 8003df4:	20000070 	.word	0x20000070
 8003df8:	ffff0208 	.word	0xffff0208

08003dfc <__ssputs_r>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	688e      	ldr	r6, [r1, #8]
 8003e02:	4682      	mov	sl, r0
 8003e04:	429e      	cmp	r6, r3
 8003e06:	460c      	mov	r4, r1
 8003e08:	4690      	mov	r8, r2
 8003e0a:	461f      	mov	r7, r3
 8003e0c:	d838      	bhi.n	8003e80 <__ssputs_r+0x84>
 8003e0e:	898a      	ldrh	r2, [r1, #12]
 8003e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e14:	d032      	beq.n	8003e7c <__ssputs_r+0x80>
 8003e16:	6825      	ldr	r5, [r4, #0]
 8003e18:	6909      	ldr	r1, [r1, #16]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	eba5 0901 	sub.w	r9, r5, r1
 8003e20:	6965      	ldr	r5, [r4, #20]
 8003e22:	444b      	add	r3, r9
 8003e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e2c:	106d      	asrs	r5, r5, #1
 8003e2e:	429d      	cmp	r5, r3
 8003e30:	bf38      	it	cc
 8003e32:	461d      	movcc	r5, r3
 8003e34:	0553      	lsls	r3, r2, #21
 8003e36:	d531      	bpl.n	8003e9c <__ssputs_r+0xa0>
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f000 fb53 	bl	80044e4 <_malloc_r>
 8003e3e:	4606      	mov	r6, r0
 8003e40:	b950      	cbnz	r0, 8003e58 <__ssputs_r+0x5c>
 8003e42:	230c      	movs	r3, #12
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f8ca 3000 	str.w	r3, [sl]
 8003e4c:	89a3      	ldrh	r3, [r4, #12]
 8003e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	464a      	mov	r2, r9
 8003e5a:	6921      	ldr	r1, [r4, #16]
 8003e5c:	f000 face 	bl	80043fc <memcpy>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	6126      	str	r6, [r4, #16]
 8003e6e:	444e      	add	r6, r9
 8003e70:	6026      	str	r6, [r4, #0]
 8003e72:	463e      	mov	r6, r7
 8003e74:	6165      	str	r5, [r4, #20]
 8003e76:	eba5 0509 	sub.w	r5, r5, r9
 8003e7a:	60a5      	str	r5, [r4, #8]
 8003e7c:	42be      	cmp	r6, r7
 8003e7e:	d900      	bls.n	8003e82 <__ssputs_r+0x86>
 8003e80:	463e      	mov	r6, r7
 8003e82:	4632      	mov	r2, r6
 8003e84:	4641      	mov	r1, r8
 8003e86:	6820      	ldr	r0, [r4, #0]
 8003e88:	f000 fac6 	bl	8004418 <memmove>
 8003e8c:	68a3      	ldr	r3, [r4, #8]
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	1b9b      	subs	r3, r3, r6
 8003e92:	4432      	add	r2, r6
 8003e94:	2000      	movs	r0, #0
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	6022      	str	r2, [r4, #0]
 8003e9a:	e7db      	b.n	8003e54 <__ssputs_r+0x58>
 8003e9c:	462a      	mov	r2, r5
 8003e9e:	f000 fb7b 	bl	8004598 <_realloc_r>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d1e1      	bne.n	8003e6c <__ssputs_r+0x70>
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	f000 face 	bl	800444c <_free_r>
 8003eb0:	e7c7      	b.n	8003e42 <__ssputs_r+0x46>
	...

08003eb4 <_svfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	4698      	mov	r8, r3
 8003eba:	898b      	ldrh	r3, [r1, #12]
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	b09d      	sub	sp, #116	; 0x74
 8003ec6:	d50e      	bpl.n	8003ee6 <_svfiprintf_r+0x32>
 8003ec8:	690b      	ldr	r3, [r1, #16]
 8003eca:	b963      	cbnz	r3, 8003ee6 <_svfiprintf_r+0x32>
 8003ecc:	2140      	movs	r1, #64	; 0x40
 8003ece:	f000 fb09 	bl	80044e4 <_malloc_r>
 8003ed2:	6028      	str	r0, [r5, #0]
 8003ed4:	6128      	str	r0, [r5, #16]
 8003ed6:	b920      	cbnz	r0, 8003ee2 <_svfiprintf_r+0x2e>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	e0d1      	b.n	8004086 <_svfiprintf_r+0x1d2>
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	616b      	str	r3, [r5, #20]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eea:	2320      	movs	r3, #32
 8003eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ef0:	2330      	movs	r3, #48	; 0x30
 8003ef2:	f04f 0901 	mov.w	r9, #1
 8003ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003efa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040a0 <_svfiprintf_r+0x1ec>
 8003efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f02:	4623      	mov	r3, r4
 8003f04:	469a      	mov	sl, r3
 8003f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f0a:	b10a      	cbz	r2, 8003f10 <_svfiprintf_r+0x5c>
 8003f0c:	2a25      	cmp	r2, #37	; 0x25
 8003f0e:	d1f9      	bne.n	8003f04 <_svfiprintf_r+0x50>
 8003f10:	ebba 0b04 	subs.w	fp, sl, r4
 8003f14:	d00b      	beq.n	8003f2e <_svfiprintf_r+0x7a>
 8003f16:	465b      	mov	r3, fp
 8003f18:	4622      	mov	r2, r4
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff ff6d 	bl	8003dfc <__ssputs_r>
 8003f22:	3001      	adds	r0, #1
 8003f24:	f000 80aa 	beq.w	800407c <_svfiprintf_r+0x1c8>
 8003f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f2a:	445a      	add	r2, fp
 8003f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a2 	beq.w	800407c <_svfiprintf_r+0x1c8>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f42:	f10a 0a01 	add.w	sl, sl, #1
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	9307      	str	r3, [sp, #28]
 8003f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f50:	4654      	mov	r4, sl
 8003f52:	2205      	movs	r2, #5
 8003f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f58:	4851      	ldr	r0, [pc, #324]	; (80040a0 <_svfiprintf_r+0x1ec>)
 8003f5a:	f000 fa41 	bl	80043e0 <memchr>
 8003f5e:	9a04      	ldr	r2, [sp, #16]
 8003f60:	b9d8      	cbnz	r0, 8003f9a <_svfiprintf_r+0xe6>
 8003f62:	06d0      	lsls	r0, r2, #27
 8003f64:	bf44      	itt	mi
 8003f66:	2320      	movmi	r3, #32
 8003f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f6c:	0711      	lsls	r1, r2, #28
 8003f6e:	bf44      	itt	mi
 8003f70:	232b      	movmi	r3, #43	; 0x2b
 8003f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f76:	f89a 3000 	ldrb.w	r3, [sl]
 8003f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f7c:	d015      	beq.n	8003faa <_svfiprintf_r+0xf6>
 8003f7e:	4654      	mov	r4, sl
 8003f80:	2000      	movs	r0, #0
 8003f82:	f04f 0c0a 	mov.w	ip, #10
 8003f86:	9a07      	ldr	r2, [sp, #28]
 8003f88:	4621      	mov	r1, r4
 8003f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f8e:	3b30      	subs	r3, #48	; 0x30
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	d94e      	bls.n	8004032 <_svfiprintf_r+0x17e>
 8003f94:	b1b0      	cbz	r0, 8003fc4 <_svfiprintf_r+0x110>
 8003f96:	9207      	str	r2, [sp, #28]
 8003f98:	e014      	b.n	8003fc4 <_svfiprintf_r+0x110>
 8003f9a:	eba0 0308 	sub.w	r3, r0, r8
 8003f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	46a2      	mov	sl, r4
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	e7d2      	b.n	8003f50 <_svfiprintf_r+0x9c>
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	1d19      	adds	r1, r3, #4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	9103      	str	r1, [sp, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bfbb      	ittet	lt
 8003fb6:	425b      	neglt	r3, r3
 8003fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fbc:	9307      	strge	r3, [sp, #28]
 8003fbe:	9307      	strlt	r3, [sp, #28]
 8003fc0:	bfb8      	it	lt
 8003fc2:	9204      	strlt	r2, [sp, #16]
 8003fc4:	7823      	ldrb	r3, [r4, #0]
 8003fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc8:	d10c      	bne.n	8003fe4 <_svfiprintf_r+0x130>
 8003fca:	7863      	ldrb	r3, [r4, #1]
 8003fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003fce:	d135      	bne.n	800403c <_svfiprintf_r+0x188>
 8003fd0:	9b03      	ldr	r3, [sp, #12]
 8003fd2:	3402      	adds	r4, #2
 8003fd4:	1d1a      	adds	r2, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9203      	str	r2, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfb8      	it	lt
 8003fde:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040b0 <_svfiprintf_r+0x1fc>
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4650      	mov	r0, sl
 8003fec:	7821      	ldrb	r1, [r4, #0]
 8003fee:	f000 f9f7 	bl	80043e0 <memchr>
 8003ff2:	b140      	cbz	r0, 8004006 <_svfiprintf_r+0x152>
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	eba0 000a 	sub.w	r0, r0, sl
 8003ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8003ffe:	9b04      	ldr	r3, [sp, #16]
 8004000:	3401      	adds	r4, #1
 8004002:	4303      	orrs	r3, r0
 8004004:	9304      	str	r3, [sp, #16]
 8004006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400a:	2206      	movs	r2, #6
 800400c:	4825      	ldr	r0, [pc, #148]	; (80040a4 <_svfiprintf_r+0x1f0>)
 800400e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004012:	f000 f9e5 	bl	80043e0 <memchr>
 8004016:	2800      	cmp	r0, #0
 8004018:	d038      	beq.n	800408c <_svfiprintf_r+0x1d8>
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <_svfiprintf_r+0x1f4>)
 800401c:	bb1b      	cbnz	r3, 8004066 <_svfiprintf_r+0x1b2>
 800401e:	9b03      	ldr	r3, [sp, #12]
 8004020:	3307      	adds	r3, #7
 8004022:	f023 0307 	bic.w	r3, r3, #7
 8004026:	3308      	adds	r3, #8
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800402c:	4433      	add	r3, r6
 800402e:	9309      	str	r3, [sp, #36]	; 0x24
 8004030:	e767      	b.n	8003f02 <_svfiprintf_r+0x4e>
 8004032:	460c      	mov	r4, r1
 8004034:	2001      	movs	r0, #1
 8004036:	fb0c 3202 	mla	r2, ip, r2, r3
 800403a:	e7a5      	b.n	8003f88 <_svfiprintf_r+0xd4>
 800403c:	2300      	movs	r3, #0
 800403e:	f04f 0c0a 	mov.w	ip, #10
 8004042:	4619      	mov	r1, r3
 8004044:	3401      	adds	r4, #1
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	4620      	mov	r0, r4
 800404a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800404e:	3a30      	subs	r2, #48	; 0x30
 8004050:	2a09      	cmp	r2, #9
 8004052:	d903      	bls.n	800405c <_svfiprintf_r+0x1a8>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0c5      	beq.n	8003fe4 <_svfiprintf_r+0x130>
 8004058:	9105      	str	r1, [sp, #20]
 800405a:	e7c3      	b.n	8003fe4 <_svfiprintf_r+0x130>
 800405c:	4604      	mov	r4, r0
 800405e:	2301      	movs	r3, #1
 8004060:	fb0c 2101 	mla	r1, ip, r1, r2
 8004064:	e7f0      	b.n	8004048 <_svfiprintf_r+0x194>
 8004066:	ab03      	add	r3, sp, #12
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	462a      	mov	r2, r5
 800406c:	4638      	mov	r0, r7
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <_svfiprintf_r+0x1f8>)
 8004070:	a904      	add	r1, sp, #16
 8004072:	f3af 8000 	nop.w
 8004076:	1c42      	adds	r2, r0, #1
 8004078:	4606      	mov	r6, r0
 800407a:	d1d6      	bne.n	800402a <_svfiprintf_r+0x176>
 800407c:	89ab      	ldrh	r3, [r5, #12]
 800407e:	065b      	lsls	r3, r3, #25
 8004080:	f53f af2c 	bmi.w	8003edc <_svfiprintf_r+0x28>
 8004084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004086:	b01d      	add	sp, #116	; 0x74
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	ab03      	add	r3, sp, #12
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	462a      	mov	r2, r5
 8004092:	4638      	mov	r0, r7
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <_svfiprintf_r+0x1f8>)
 8004096:	a904      	add	r1, sp, #16
 8004098:	f000 f87c 	bl	8004194 <_printf_i>
 800409c:	e7eb      	b.n	8004076 <_svfiprintf_r+0x1c2>
 800409e:	bf00      	nop
 80040a0:	08004696 	.word	0x08004696
 80040a4:	080046a0 	.word	0x080046a0
 80040a8:	00000000 	.word	0x00000000
 80040ac:	08003dfd 	.word	0x08003dfd
 80040b0:	0800469c 	.word	0x0800469c

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4616      	mov	r6, r2
 80040ba:	4699      	mov	r9, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	4607      	mov	r7, r0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfb8      	it	lt
 80040c6:	4613      	movlt	r3, r2
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ce:	460c      	mov	r4, r1
 80040d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d4:	b10a      	cbz	r2, 80040da <_printf_common+0x26>
 80040d6:	3301      	adds	r3, #1
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	6833      	ldrmi	r3, [r6, #0]
 80040e2:	3302      	addmi	r3, #2
 80040e4:	6033      	strmi	r3, [r6, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	f015 0506 	ands.w	r5, r5, #6
 80040ec:	d106      	bne.n	80040fc <_printf_common+0x48>
 80040ee:	f104 0a19 	add.w	sl, r4, #25
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dc28      	bgt.n	800414e <_printf_common+0x9a>
 80040fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004100:	1e13      	subs	r3, r2, #0
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	bf18      	it	ne
 8004106:	2301      	movne	r3, #1
 8004108:	0692      	lsls	r2, r2, #26
 800410a:	d42d      	bmi.n	8004168 <_printf_common+0xb4>
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d020      	beq.n	800415c <_printf_common+0xa8>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	68e5      	ldr	r5, [r4, #12]
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf18      	it	ne
 8004126:	2500      	movne	r5, #0
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	f04f 0600 	mov.w	r6, #0
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	bf08      	it	eq
 8004132:	1aad      	subeq	r5, r5, r2
 8004134:	6922      	ldr	r2, [r4, #16]
 8004136:	bf08      	it	eq
 8004138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800413c:	4293      	cmp	r3, r2
 800413e:	bfc4      	itt	gt
 8004140:	1a9b      	subgt	r3, r3, r2
 8004142:	18ed      	addgt	r5, r5, r3
 8004144:	341a      	adds	r4, #26
 8004146:	42b5      	cmp	r5, r6
 8004148:	d11a      	bne.n	8004180 <_printf_common+0xcc>
 800414a:	2000      	movs	r0, #0
 800414c:	e008      	b.n	8004160 <_printf_common+0xac>
 800414e:	2301      	movs	r3, #1
 8004150:	4652      	mov	r2, sl
 8004152:	4649      	mov	r1, r9
 8004154:	4638      	mov	r0, r7
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d103      	bne.n	8004164 <_printf_common+0xb0>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	3501      	adds	r5, #1
 8004166:	e7c4      	b.n	80040f2 <_printf_common+0x3e>
 8004168:	2030      	movs	r0, #48	; 0x30
 800416a:	18e1      	adds	r1, r4, r3
 800416c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004176:	4422      	add	r2, r4
 8004178:	3302      	adds	r3, #2
 800417a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800417e:	e7c5      	b.n	800410c <_printf_common+0x58>
 8004180:	2301      	movs	r3, #1
 8004182:	4622      	mov	r2, r4
 8004184:	4649      	mov	r1, r9
 8004186:	4638      	mov	r0, r7
 8004188:	47c0      	blx	r8
 800418a:	3001      	adds	r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa8>
 800418e:	3601      	adds	r6, #1
 8004190:	e7d9      	b.n	8004146 <_printf_common+0x92>
	...

08004194 <_printf_i>:
 8004194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004198:	460c      	mov	r4, r1
 800419a:	7e27      	ldrb	r7, [r4, #24]
 800419c:	4691      	mov	r9, r2
 800419e:	2f78      	cmp	r7, #120	; 0x78
 80041a0:	4680      	mov	r8, r0
 80041a2:	469a      	mov	sl, r3
 80041a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041aa:	d807      	bhi.n	80041bc <_printf_i+0x28>
 80041ac:	2f62      	cmp	r7, #98	; 0x62
 80041ae:	d80a      	bhi.n	80041c6 <_printf_i+0x32>
 80041b0:	2f00      	cmp	r7, #0
 80041b2:	f000 80d9 	beq.w	8004368 <_printf_i+0x1d4>
 80041b6:	2f58      	cmp	r7, #88	; 0x58
 80041b8:	f000 80a4 	beq.w	8004304 <_printf_i+0x170>
 80041bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041c4:	e03a      	b.n	800423c <_printf_i+0xa8>
 80041c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ca:	2b15      	cmp	r3, #21
 80041cc:	d8f6      	bhi.n	80041bc <_printf_i+0x28>
 80041ce:	a001      	add	r0, pc, #4	; (adr r0, 80041d4 <_printf_i+0x40>)
 80041d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080041bd 	.word	0x080041bd
 80041e0:	080041bd 	.word	0x080041bd
 80041e4:	080041bd 	.word	0x080041bd
 80041e8:	080041bd 	.word	0x080041bd
 80041ec:	08004241 	.word	0x08004241
 80041f0:	080041bd 	.word	0x080041bd
 80041f4:	080041bd 	.word	0x080041bd
 80041f8:	080041bd 	.word	0x080041bd
 80041fc:	080041bd 	.word	0x080041bd
 8004200:	0800434f 	.word	0x0800434f
 8004204:	08004271 	.word	0x08004271
 8004208:	08004331 	.word	0x08004331
 800420c:	080041bd 	.word	0x080041bd
 8004210:	080041bd 	.word	0x080041bd
 8004214:	08004371 	.word	0x08004371
 8004218:	080041bd 	.word	0x080041bd
 800421c:	08004271 	.word	0x08004271
 8004220:	080041bd 	.word	0x080041bd
 8004224:	080041bd 	.word	0x080041bd
 8004228:	08004339 	.word	0x08004339
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	600a      	str	r2, [r1, #0]
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a4      	b.n	800438a <_printf_i+0x1f6>
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	6808      	ldr	r0, [r1, #0]
 8004244:	062e      	lsls	r6, r5, #24
 8004246:	f100 0304 	add.w	r3, r0, #4
 800424a:	d50a      	bpl.n	8004262 <_printf_i+0xce>
 800424c:	6805      	ldr	r5, [r0, #0]
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	2d00      	cmp	r5, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xc8>
 8004254:	232d      	movs	r3, #45	; 0x2d
 8004256:	426d      	negs	r5, r5
 8004258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425c:	230a      	movs	r3, #10
 800425e:	485e      	ldr	r0, [pc, #376]	; (80043d8 <_printf_i+0x244>)
 8004260:	e019      	b.n	8004296 <_printf_i+0x102>
 8004262:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004266:	6805      	ldr	r5, [r0, #0]
 8004268:	600b      	str	r3, [r1, #0]
 800426a:	bf18      	it	ne
 800426c:	b22d      	sxthne	r5, r5
 800426e:	e7ef      	b.n	8004250 <_printf_i+0xbc>
 8004270:	680b      	ldr	r3, [r1, #0]
 8004272:	6825      	ldr	r5, [r4, #0]
 8004274:	1d18      	adds	r0, r3, #4
 8004276:	6008      	str	r0, [r1, #0]
 8004278:	0628      	lsls	r0, r5, #24
 800427a:	d501      	bpl.n	8004280 <_printf_i+0xec>
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	e002      	b.n	8004286 <_printf_i+0xf2>
 8004280:	0669      	lsls	r1, r5, #25
 8004282:	d5fb      	bpl.n	800427c <_printf_i+0xe8>
 8004284:	881d      	ldrh	r5, [r3, #0]
 8004286:	2f6f      	cmp	r7, #111	; 0x6f
 8004288:	bf0c      	ite	eq
 800428a:	2308      	moveq	r3, #8
 800428c:	230a      	movne	r3, #10
 800428e:	4852      	ldr	r0, [pc, #328]	; (80043d8 <_printf_i+0x244>)
 8004290:	2100      	movs	r1, #0
 8004292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004296:	6866      	ldr	r6, [r4, #4]
 8004298:	2e00      	cmp	r6, #0
 800429a:	bfa8      	it	ge
 800429c:	6821      	ldrge	r1, [r4, #0]
 800429e:	60a6      	str	r6, [r4, #8]
 80042a0:	bfa4      	itt	ge
 80042a2:	f021 0104 	bicge.w	r1, r1, #4
 80042a6:	6021      	strge	r1, [r4, #0]
 80042a8:	b90d      	cbnz	r5, 80042ae <_printf_i+0x11a>
 80042aa:	2e00      	cmp	r6, #0
 80042ac:	d04d      	beq.n	800434a <_printf_i+0x1b6>
 80042ae:	4616      	mov	r6, r2
 80042b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b4:	fb03 5711 	mls	r7, r3, r1, r5
 80042b8:	5dc7      	ldrb	r7, [r0, r7]
 80042ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042be:	462f      	mov	r7, r5
 80042c0:	42bb      	cmp	r3, r7
 80042c2:	460d      	mov	r5, r1
 80042c4:	d9f4      	bls.n	80042b0 <_printf_i+0x11c>
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d10b      	bne.n	80042e2 <_printf_i+0x14e>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	07df      	lsls	r7, r3, #31
 80042ce:	d508      	bpl.n	80042e2 <_printf_i+0x14e>
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	6861      	ldr	r1, [r4, #4]
 80042d4:	4299      	cmp	r1, r3
 80042d6:	bfde      	ittt	le
 80042d8:	2330      	movle	r3, #48	; 0x30
 80042da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042e2:	1b92      	subs	r2, r2, r6
 80042e4:	6122      	str	r2, [r4, #16]
 80042e6:	464b      	mov	r3, r9
 80042e8:	4621      	mov	r1, r4
 80042ea:	4640      	mov	r0, r8
 80042ec:	f8cd a000 	str.w	sl, [sp]
 80042f0:	aa03      	add	r2, sp, #12
 80042f2:	f7ff fedf 	bl	80040b4 <_printf_common>
 80042f6:	3001      	adds	r0, #1
 80042f8:	d14c      	bne.n	8004394 <_printf_i+0x200>
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	b004      	add	sp, #16
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	4834      	ldr	r0, [pc, #208]	; (80043d8 <_printf_i+0x244>)
 8004306:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800430a:	680e      	ldr	r6, [r1, #0]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004312:	061f      	lsls	r7, r3, #24
 8004314:	600e      	str	r6, [r1, #0]
 8004316:	d514      	bpl.n	8004342 <_printf_i+0x1ae>
 8004318:	07d9      	lsls	r1, r3, #31
 800431a:	bf44      	itt	mi
 800431c:	f043 0320 	orrmi.w	r3, r3, #32
 8004320:	6023      	strmi	r3, [r4, #0]
 8004322:	b91d      	cbnz	r5, 800432c <_printf_i+0x198>
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f023 0320 	bic.w	r3, r3, #32
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	2310      	movs	r3, #16
 800432e:	e7af      	b.n	8004290 <_printf_i+0xfc>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	2378      	movs	r3, #120	; 0x78
 800433a:	4828      	ldr	r0, [pc, #160]	; (80043dc <_printf_i+0x248>)
 800433c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004340:	e7e3      	b.n	800430a <_printf_i+0x176>
 8004342:	065e      	lsls	r6, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2ad      	uxthmi	r5, r5
 8004348:	e7e6      	b.n	8004318 <_printf_i+0x184>
 800434a:	4616      	mov	r6, r2
 800434c:	e7bb      	b.n	80042c6 <_printf_i+0x132>
 800434e:	680b      	ldr	r3, [r1, #0]
 8004350:	6826      	ldr	r6, [r4, #0]
 8004352:	1d1d      	adds	r5, r3, #4
 8004354:	6960      	ldr	r0, [r4, #20]
 8004356:	600d      	str	r5, [r1, #0]
 8004358:	0635      	lsls	r5, r6, #24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	d501      	bpl.n	8004362 <_printf_i+0x1ce>
 800435e:	6018      	str	r0, [r3, #0]
 8004360:	e002      	b.n	8004368 <_printf_i+0x1d4>
 8004362:	0671      	lsls	r1, r6, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0x1ca>
 8004366:	8018      	strh	r0, [r3, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	4616      	mov	r6, r2
 800436c:	6123      	str	r3, [r4, #16]
 800436e:	e7ba      	b.n	80042e6 <_printf_i+0x152>
 8004370:	680b      	ldr	r3, [r1, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	600a      	str	r2, [r1, #0]
 8004376:	681e      	ldr	r6, [r3, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	4630      	mov	r0, r6
 800437c:	6862      	ldr	r2, [r4, #4]
 800437e:	f000 f82f 	bl	80043e0 <memchr>
 8004382:	b108      	cbz	r0, 8004388 <_printf_i+0x1f4>
 8004384:	1b80      	subs	r0, r0, r6
 8004386:	6060      	str	r0, [r4, #4]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	6123      	str	r3, [r4, #16]
 800438c:	2300      	movs	r3, #0
 800438e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004392:	e7a8      	b.n	80042e6 <_printf_i+0x152>
 8004394:	4632      	mov	r2, r6
 8004396:	4649      	mov	r1, r9
 8004398:	4640      	mov	r0, r8
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	47d0      	blx	sl
 800439e:	3001      	adds	r0, #1
 80043a0:	d0ab      	beq.n	80042fa <_printf_i+0x166>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	079b      	lsls	r3, r3, #30
 80043a6:	d413      	bmi.n	80043d0 <_printf_i+0x23c>
 80043a8:	68e0      	ldr	r0, [r4, #12]
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	4298      	cmp	r0, r3
 80043ae:	bfb8      	it	lt
 80043b0:	4618      	movlt	r0, r3
 80043b2:	e7a4      	b.n	80042fe <_printf_i+0x16a>
 80043b4:	2301      	movs	r3, #1
 80043b6:	4632      	mov	r2, r6
 80043b8:	4649      	mov	r1, r9
 80043ba:	4640      	mov	r0, r8
 80043bc:	47d0      	blx	sl
 80043be:	3001      	adds	r0, #1
 80043c0:	d09b      	beq.n	80042fa <_printf_i+0x166>
 80043c2:	3501      	adds	r5, #1
 80043c4:	68e3      	ldr	r3, [r4, #12]
 80043c6:	9903      	ldr	r1, [sp, #12]
 80043c8:	1a5b      	subs	r3, r3, r1
 80043ca:	42ab      	cmp	r3, r5
 80043cc:	dcf2      	bgt.n	80043b4 <_printf_i+0x220>
 80043ce:	e7eb      	b.n	80043a8 <_printf_i+0x214>
 80043d0:	2500      	movs	r5, #0
 80043d2:	f104 0619 	add.w	r6, r4, #25
 80043d6:	e7f5      	b.n	80043c4 <_printf_i+0x230>
 80043d8:	080046a7 	.word	0x080046a7
 80043dc:	080046b8 	.word	0x080046b8

080043e0 <memchr>:
 80043e0:	4603      	mov	r3, r0
 80043e2:	b510      	push	{r4, lr}
 80043e4:	b2c9      	uxtb	r1, r1
 80043e6:	4402      	add	r2, r0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	d101      	bne.n	80043f2 <memchr+0x12>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e003      	b.n	80043fa <memchr+0x1a>
 80043f2:	7804      	ldrb	r4, [r0, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	428c      	cmp	r4, r1
 80043f8:	d1f6      	bne.n	80043e8 <memchr+0x8>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <memcpy>:
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f100 33ff 	add.w	r3, r0, #4294967295
 8004404:	d100      	bne.n	8004408 <memcpy+0xc>
 8004406:	4770      	bx	lr
 8004408:	b510      	push	{r4, lr}
 800440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440e:	4291      	cmp	r1, r2
 8004410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004414:	d1f9      	bne.n	800440a <memcpy+0xe>
 8004416:	bd10      	pop	{r4, pc}

08004418 <memmove>:
 8004418:	4288      	cmp	r0, r1
 800441a:	b510      	push	{r4, lr}
 800441c:	eb01 0402 	add.w	r4, r1, r2
 8004420:	d902      	bls.n	8004428 <memmove+0x10>
 8004422:	4284      	cmp	r4, r0
 8004424:	4623      	mov	r3, r4
 8004426:	d807      	bhi.n	8004438 <memmove+0x20>
 8004428:	1e43      	subs	r3, r0, #1
 800442a:	42a1      	cmp	r1, r4
 800442c:	d008      	beq.n	8004440 <memmove+0x28>
 800442e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004436:	e7f8      	b.n	800442a <memmove+0x12>
 8004438:	4601      	mov	r1, r0
 800443a:	4402      	add	r2, r0
 800443c:	428a      	cmp	r2, r1
 800443e:	d100      	bne.n	8004442 <memmove+0x2a>
 8004440:	bd10      	pop	{r4, pc}
 8004442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800444a:	e7f7      	b.n	800443c <memmove+0x24>

0800444c <_free_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4605      	mov	r5, r0
 8004450:	2900      	cmp	r1, #0
 8004452:	d043      	beq.n	80044dc <_free_r+0x90>
 8004454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004458:	1f0c      	subs	r4, r1, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfb8      	it	lt
 800445e:	18e4      	addlt	r4, r4, r3
 8004460:	f000 f8d0 	bl	8004604 <__malloc_lock>
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <_free_r+0x94>)
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	4610      	mov	r0, r2
 800446a:	b933      	cbnz	r3, 800447a <_free_r+0x2e>
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	6014      	str	r4, [r2, #0]
 8004470:	4628      	mov	r0, r5
 8004472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004476:	f000 b8cb 	b.w	8004610 <__malloc_unlock>
 800447a:	42a3      	cmp	r3, r4
 800447c:	d90a      	bls.n	8004494 <_free_r+0x48>
 800447e:	6821      	ldr	r1, [r4, #0]
 8004480:	1862      	adds	r2, r4, r1
 8004482:	4293      	cmp	r3, r2
 8004484:	bf01      	itttt	eq
 8004486:	681a      	ldreq	r2, [r3, #0]
 8004488:	685b      	ldreq	r3, [r3, #4]
 800448a:	1852      	addeq	r2, r2, r1
 800448c:	6022      	streq	r2, [r4, #0]
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	6004      	str	r4, [r0, #0]
 8004492:	e7ed      	b.n	8004470 <_free_r+0x24>
 8004494:	461a      	mov	r2, r3
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b10b      	cbz	r3, 800449e <_free_r+0x52>
 800449a:	42a3      	cmp	r3, r4
 800449c:	d9fa      	bls.n	8004494 <_free_r+0x48>
 800449e:	6811      	ldr	r1, [r2, #0]
 80044a0:	1850      	adds	r0, r2, r1
 80044a2:	42a0      	cmp	r0, r4
 80044a4:	d10b      	bne.n	80044be <_free_r+0x72>
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	4401      	add	r1, r0
 80044aa:	1850      	adds	r0, r2, r1
 80044ac:	4283      	cmp	r3, r0
 80044ae:	6011      	str	r1, [r2, #0]
 80044b0:	d1de      	bne.n	8004470 <_free_r+0x24>
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4401      	add	r1, r0
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	6053      	str	r3, [r2, #4]
 80044bc:	e7d8      	b.n	8004470 <_free_r+0x24>
 80044be:	d902      	bls.n	80044c6 <_free_r+0x7a>
 80044c0:	230c      	movs	r3, #12
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	e7d4      	b.n	8004470 <_free_r+0x24>
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	1821      	adds	r1, r4, r0
 80044ca:	428b      	cmp	r3, r1
 80044cc:	bf01      	itttt	eq
 80044ce:	6819      	ldreq	r1, [r3, #0]
 80044d0:	685b      	ldreq	r3, [r3, #4]
 80044d2:	1809      	addeq	r1, r1, r0
 80044d4:	6021      	streq	r1, [r4, #0]
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	6054      	str	r4, [r2, #4]
 80044da:	e7c9      	b.n	8004470 <_free_r+0x24>
 80044dc:	bd38      	pop	{r3, r4, r5, pc}
 80044de:	bf00      	nop
 80044e0:	20000124 	.word	0x20000124

080044e4 <_malloc_r>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	1ccd      	adds	r5, r1, #3
 80044e8:	f025 0503 	bic.w	r5, r5, #3
 80044ec:	3508      	adds	r5, #8
 80044ee:	2d0c      	cmp	r5, #12
 80044f0:	bf38      	it	cc
 80044f2:	250c      	movcc	r5, #12
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	4606      	mov	r6, r0
 80044f8:	db01      	blt.n	80044fe <_malloc_r+0x1a>
 80044fa:	42a9      	cmp	r1, r5
 80044fc:	d903      	bls.n	8004506 <_malloc_r+0x22>
 80044fe:	230c      	movs	r3, #12
 8004500:	6033      	str	r3, [r6, #0]
 8004502:	2000      	movs	r0, #0
 8004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004506:	f000 f87d 	bl	8004604 <__malloc_lock>
 800450a:	4921      	ldr	r1, [pc, #132]	; (8004590 <_malloc_r+0xac>)
 800450c:	680a      	ldr	r2, [r1, #0]
 800450e:	4614      	mov	r4, r2
 8004510:	b99c      	cbnz	r4, 800453a <_malloc_r+0x56>
 8004512:	4f20      	ldr	r7, [pc, #128]	; (8004594 <_malloc_r+0xb0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b923      	cbnz	r3, 8004522 <_malloc_r+0x3e>
 8004518:	4621      	mov	r1, r4
 800451a:	4630      	mov	r0, r6
 800451c:	f000 f862 	bl	80045e4 <_sbrk_r>
 8004520:	6038      	str	r0, [r7, #0]
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	f000 f85d 	bl	80045e4 <_sbrk_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d123      	bne.n	8004576 <_malloc_r+0x92>
 800452e:	230c      	movs	r3, #12
 8004530:	4630      	mov	r0, r6
 8004532:	6033      	str	r3, [r6, #0]
 8004534:	f000 f86c 	bl	8004610 <__malloc_unlock>
 8004538:	e7e3      	b.n	8004502 <_malloc_r+0x1e>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	1b5b      	subs	r3, r3, r5
 800453e:	d417      	bmi.n	8004570 <_malloc_r+0x8c>
 8004540:	2b0b      	cmp	r3, #11
 8004542:	d903      	bls.n	800454c <_malloc_r+0x68>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	441c      	add	r4, r3
 8004548:	6025      	str	r5, [r4, #0]
 800454a:	e004      	b.n	8004556 <_malloc_r+0x72>
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	42a2      	cmp	r2, r4
 8004550:	bf0c      	ite	eq
 8004552:	600b      	streq	r3, [r1, #0]
 8004554:	6053      	strne	r3, [r2, #4]
 8004556:	4630      	mov	r0, r6
 8004558:	f000 f85a 	bl	8004610 <__malloc_unlock>
 800455c:	f104 000b 	add.w	r0, r4, #11
 8004560:	1d23      	adds	r3, r4, #4
 8004562:	f020 0007 	bic.w	r0, r0, #7
 8004566:	1ac2      	subs	r2, r0, r3
 8004568:	d0cc      	beq.n	8004504 <_malloc_r+0x20>
 800456a:	1a1b      	subs	r3, r3, r0
 800456c:	50a3      	str	r3, [r4, r2]
 800456e:	e7c9      	b.n	8004504 <_malloc_r+0x20>
 8004570:	4622      	mov	r2, r4
 8004572:	6864      	ldr	r4, [r4, #4]
 8004574:	e7cc      	b.n	8004510 <_malloc_r+0x2c>
 8004576:	1cc4      	adds	r4, r0, #3
 8004578:	f024 0403 	bic.w	r4, r4, #3
 800457c:	42a0      	cmp	r0, r4
 800457e:	d0e3      	beq.n	8004548 <_malloc_r+0x64>
 8004580:	1a21      	subs	r1, r4, r0
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f82e 	bl	80045e4 <_sbrk_r>
 8004588:	3001      	adds	r0, #1
 800458a:	d1dd      	bne.n	8004548 <_malloc_r+0x64>
 800458c:	e7cf      	b.n	800452e <_malloc_r+0x4a>
 800458e:	bf00      	nop
 8004590:	20000124 	.word	0x20000124
 8004594:	20000128 	.word	0x20000128

08004598 <_realloc_r>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	4607      	mov	r7, r0
 800459c:	4614      	mov	r4, r2
 800459e:	460e      	mov	r6, r1
 80045a0:	b921      	cbnz	r1, 80045ac <_realloc_r+0x14>
 80045a2:	4611      	mov	r1, r2
 80045a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045a8:	f7ff bf9c 	b.w	80044e4 <_malloc_r>
 80045ac:	b922      	cbnz	r2, 80045b8 <_realloc_r+0x20>
 80045ae:	f7ff ff4d 	bl	800444c <_free_r>
 80045b2:	4625      	mov	r5, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b8:	f000 f830 	bl	800461c <_malloc_usable_size_r>
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d20f      	bcs.n	80045e0 <_realloc_r+0x48>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4638      	mov	r0, r7
 80045c4:	f7ff ff8e 	bl	80044e4 <_malloc_r>
 80045c8:	4605      	mov	r5, r0
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0f2      	beq.n	80045b4 <_realloc_r+0x1c>
 80045ce:	4631      	mov	r1, r6
 80045d0:	4622      	mov	r2, r4
 80045d2:	f7ff ff13 	bl	80043fc <memcpy>
 80045d6:	4631      	mov	r1, r6
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff ff37 	bl	800444c <_free_r>
 80045de:	e7e9      	b.n	80045b4 <_realloc_r+0x1c>
 80045e0:	4635      	mov	r5, r6
 80045e2:	e7e7      	b.n	80045b4 <_realloc_r+0x1c>

080045e4 <_sbrk_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	2300      	movs	r3, #0
 80045e8:	4d05      	ldr	r5, [pc, #20]	; (8004600 <_sbrk_r+0x1c>)
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fd fa12 	bl	8001a18 <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_sbrk_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_sbrk_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20000594 	.word	0x20000594

08004604 <__malloc_lock>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__malloc_lock+0x8>)
 8004606:	f000 b811 	b.w	800462c <__retarget_lock_acquire_recursive>
 800460a:	bf00      	nop
 800460c:	2000059c 	.word	0x2000059c

08004610 <__malloc_unlock>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <__malloc_unlock+0x8>)
 8004612:	f000 b80c 	b.w	800462e <__retarget_lock_release_recursive>
 8004616:	bf00      	nop
 8004618:	2000059c 	.word	0x2000059c

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <__retarget_lock_acquire_recursive>:
 800462c:	4770      	bx	lr

0800462e <__retarget_lock_release_recursive>:
 800462e:	4770      	bx	lr

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
